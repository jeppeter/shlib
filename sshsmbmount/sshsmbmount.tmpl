#! /bin/bash

DEF_VERBOSE=0
verbose=$DEF_VERBOSE
ECHO=`which echo`
DEF_DIRECTORY="/mnt/zdisk"
AWK=`which awk`
mntdir=$DEF_DIRECTORY
MKDIR=`which mkdir`
MOUNT=`which mount`
PERL=`which perl`
read -r -d '' PERL_MOUNTCHECK_STR<<EOFMM
%PERL_MOUNTCHECK_STR%
EOFMM

read -r -d '' PERL_READLINK_STR<<EOFMM
use Cwd "abs_path";
print abs_path(shift);
EOFMM


EQUALAWK_STR='{if($0==searchvar){print $0;}}'
GREP=`/usr/bin/which grep`
SUDO_PREFIX=`/usr/bin/which sudo`

DEF_SMBDIR=""
if [ ! -z "$SSH_CLIENT" ]
	then
	_ip=`${ECHO} $SSH_CLIENT | ${AWK} '{print $1}'`
	DEF_SMBDIR="//$_ip/zdisk"
fi
smbdir=$DEF_SMBDIR

DEF_USER=$USER
DEF_PASS=""

username=$DEF_USER
password=$DEF_PASS

INFO_LEVEL=2
DEBUG_LEVEL=3
WARN_LEVEL=1
ERROR_LEVEL=0

function __Debug()
{
        local _fmt=$1
        local _osname=`uname -s | tr [:upper:] [:lower:]`
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        
        _fmtstr=""
        if [ $verbose -gt $INFO_LEVEL ]
                then
                if [ "$_osname" = "darwin" ]
                        then
                        local _filestack=`expr $_backstack \+ 1`
                        _fmtstr="${BASH_SOURCE[$_filestack]}:${BASH_LINENO[$_backstack]} "
                else
                        _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
                fi
        fi

        _fmtstr="$_fmtstr$_fmt"
        if [ "$_osname" = "darwin" ]
        	then
        	${ECHO} "$_fmtstr" >&2
        else
        	${ECHO} -e "$_fmtstr" >&2
    	fi
}

function Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $DEBUG_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}

ErrorExit()
{
	_ec=$1
	_fmt=$2

	${ECHO} "$_fmt" >/dev/stderr
	exit $_ec
}


MakeDirNotExist()
{
	_dir=$1
	if [ ! -d "$_dir" ]
		then
		if [ ! -e "$_dir" ]
			then
			${MKDIR} -p "$_dir"
			_res=$?
		else
			ErrorExit 3 "$_dir exists but not directory"
		fi

		if [ $_res -ne 0 ]
			then
			ErrorExit $_res "mkdir $_dir error($_res)"
		fi
	fi
}

CheckMountSmb()
{
	local _smbdir=$1
	local _mntdir=$2
	local _mounted=0
	local _hasmounted
	local _mountpoint
	local _rpmountpoint
	local _rpmntdir


	_mountpoint=`${MOUNT} | ${PERL} -e "$PERL_MOUNTCHECK_STR" mntpnt "$_smbdir"`
	Debug "mountpoint [$_mountpoint]"
	if [ -n "$_mountpoint" ] 
	then
		_rpmountpoint=`perl -e "$PERL_READLINK_STR" "$_mountpoint"`
		_rpmntdir=`perl -e "$PERL_READLINK_STR" "$_mntdir"`
		Debug "_rpmountpoint [$_rpmountpoint] _rpmntdir [$_rpmntdir]"
		if [ "$_rpmountpoint" = "$_rpmntdir" ]
			then
			_mounted=1
		fi
	fi
	${ECHO} "$_mounted"
}

MountSmb()
{
	local _smbdir=$1
	local _mntdir=$2
	local _user=$3
	local _pass=$4
	local _osname=`uname -s | tr [:upper:] [:lower:]`
	local _smbpart=`echo -n "$_smbdir" | sed 's|^\/\/||'`
	local _tries=0
	local _mounted

	if [ "$_osname" = "darwin" ]
		then
		Debug "call [mount volume \"smb://$_user:$_pass@$_smbpart\"]"
		osascript -e "mount volume \"smb://$_user:$_pass@$_smbpart\"" >/dev/null
		_res=$?
		if [ $_res -ne 0 ]
			then
			ErrorExit $_res "mount $_smbdir $_mntdir error($_res)"
		fi

		# now wait for the mount dir is ok
		_tries=0
		_mounted=0
		while [ $_tries -lt 10 ]
		do
			_mounted=$(CheckMountSmb "$_smbdir" "$_mntdir")
			if [ $_mounted -gt 0 ]
				then
				break
			fi
			_tries=`expr $_tries \+ 1`
			sleep 1
		done
		if [ $_mounted -eq 0 ]
			then
			ErrorExit 3 "could not mount"
		fi


	else
		Debug "call [${SUDO_PREFIX} ${MOUNT} \"$_smbdir\" \"$_mntdir\" -o username=$_user,password=$_pass]"
		${SUDO_PREFIX} ${MOUNT} "$_smbdir" "$_mntdir" -o username=$_user,password=$_pass
		_res=$?
	fi
	if [  $_res -ne 0 ]
		then
		ErrorExit $_res "mount $_smbdir $_mntdir error($_res)"
	fi
}


Usage()
{
	_ec=$1
	_fmt=$2
	_fp=/dev/stderr

	if [ $_ec -eq 0 ]
		then
		_fp=/dev/stdout
	fi

	${ECHO} "$0 [OPTIONS] [password] [username]" >$_fp
	${ECHO} "  -h|--help                     to display this help information" >$_fp
	${ECHO} "  -d|--directory dir            to specify directory to mount default($DEF_DIRECTORY)" >$_fp
	${ECHO} "  -v|--verbose                  to specify verbose mode default($DEF_VERBOSE)" >$_fp 
	${ECHO} "  -r|--remote remotedir         to specify remote dir default($DEF_SMBDIR)" >$_fp
	${ECHO} "  [username]                    to specify username default($DEF_USER)" >$_fp
	${ECHO} "  [password]                    to specify password default($DEF_PASS)" >$_fp

	exit $_ec
}


while [ $# -gt 0 ]
do
	breakone=0
	case "$1" in
		-h|--help)
			Usage 0 ""
			;;
		-d|--directory)
			if [ $# -gt 1 ]
				then
				mntdir="$2"
				shift
			else
				Usage 3 "$1 need directory"
			fi
			;;
		-v|--verbose)
			verbose=`expr $verbose + 1`
			;;
		-r|--remote)
			if [ $# -gt 1 ]
				then
				smbdir="$2"
				shift
			else
				Usage 3 "$1 need smbdir"
			fi
			;;
		*)
			breakone=1
			;;
	esac
	if [ $breakone -ne 0 ]
		then
		break
	fi
	shift
done

if [ $# -gt 0 ]
	then
	password="$1"
	shift
fi

if [ $# -gt 0 ]
	then
	username="$1"
	shift
fi

mounted=$(CheckMountSmb "$smbdir"  "$mntdir" )
if [ $mounted -eq 0 ]
	then
	MountSmb "$smbdir" "$mntdir" "$username" "$password"
fi
echo "$mntdir" >/dev/stdout
