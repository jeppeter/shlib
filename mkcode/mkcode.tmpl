#! /bin/bash

%DEFINESH_CODE%

%DEBUGSH_CODE%

%DEPENDSH_CODE%

read -r -d '' PYTHON_MD5_STR<<EOFMM
%PYTHON_MD5_STR%
EOFMM

res=$(check_depend "extargsparse4sh")
if [ $res -eq 0 ]
	then
	cat >&2 <<EOF
	can not found extargsparse4sh in [$PATH]
	please download source code from https://github.com/jeppeter/extargsparse4sh
	and make to copy to the path
EOF
	exit 4
fi

source extargsparse4sh

read -r -d '' PERL_BASE_NAME<<EOFMM
%PERL_BASE_NAME%
EOFMM


read -r -d '' OPTIONS<<EOFMM
	{
		"verbose|v" : "+",
		"stdout|c##to set stdout##" : false,
		"externdecl|E##to make cpp file with extern##" : false,
		"header<subcommand>" : {
			"\$<headers>" : "+"
		},
		"mkheader<subcommand>" : {
			"\$<makeheaders>" : "+"
		}
	}
EOFMM


function make_header()
{
	local _f="$1"
	local _outf="$2"
	local _basename=`${PERL} -e "$PERL_BASE_NAME" "$_f"`
	local _postfix=`dd if=/dev/urandom bs=100 count=1 2>/dev/null | python -c "$PYTHON_MD5_STR" | awk '{print $1}' | tr [:lower:] [:upper:]`
	local _h=`echo -n "${_basename}" | tr . _ | tr [:lower:] [:upper:] `
	local _defcode="__${_h}_${_postfix}__"
	if [ -z "$_outf" ]
		then
		_outf=$_f
	fi
	Debug "_basename ${_basename} _h ${_h} _defcode ${_defcode} _postfix ${_postfix}"
	echo "#ifndef ${_defcode}" > "$_outf"
	echo "#define ${_defcode}" >> "$_outf"
	echo "" >> "$_outf"

	if [ $externdecl -gt 0 ]
		then
		echo '#ifdef __cplusplus' >> $_outf
		echo 'extern "C" {' >> $_outf
		echo '#endif /* __cplusplus*/' >> $_outf

		echo '' >> $_outf
		echo '' >> $_outf

		echo '#ifdef __cplusplus' >> $_outf
		echo '};' >> $_outf
		echo '#endif /* __cplusplus*/' >> $_outf

		echo '' >> $_outf
	fi

	echo "#endif /* ${_defcode} */" >> "$_outf"
	return
}

function make_make_header()
{
	local _f="$1"
	local _outf="$2"
	local _basename=`${PERL} -e "$PERL_BASE_NAME" "$_f"`
	local _postfix=`dd if=/dev/urandom bs=100 count=1 2>/dev/null | md5sum | awk '{print $1}' | tr [:lower:] [:upper:]`
	local _h=`echo -n "${_basename}" | tr . _ | tr [:lower:] [:upper:] `
	local _defcode="__${_h}_${_postfix}__"
	if [ -z "$_outf" ]
		then
		_outf=$_f
	fi
	Debug "_basename ${_basename} _h ${_h} _defcode ${_defcode} _postfix ${_postfix}"
	echo "ifndef ${_defcode}" > "$_f"
	echo "${_defcode}:=1" >> "$_outf"
	echo "" >> "$_outf"
	echo "## ${_defcode} ##" >> "$_outf"
	echo "endif" >> "$_outf"
	return
}


parse_command_line "$OPTIONS" "$@"

if [ "$subcommand" = "header" ]
	then
	for curfile in ${headers[@]}
	do
		if [ $stdout -ne 0 ]
			then
			make_header "$curfile" /dev/stdout
		else
			make_header "$curfile"
		fi
	done
elif [ "$subcommand" = "mkheader" ]
	then
	for curfile in ${makeheaders[@]}
	do
		if [ $stdout -ne 0 ]
			then
			make_make_header "$curfile" /dev/stdout
		else
			make_make_header "$curfile"
		fi
	done
else
	ErrorExit 4 "not support subcommand [$subcommand]"
fi
