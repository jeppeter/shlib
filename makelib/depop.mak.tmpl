ifndef __DEPENDS_OP_MAK__
__DEPENDS_OP_MAK__:=1


#########################################
##  build_c_depends
##            to build c depends
##  input value
##      1        input c file 
##      2        output depend file
##      3        for shortname handle
##      4        for common cflags
##      5        for compiler default gcc
#########################################
define build_c_depends
$(call call_exec_directly,$(call get_value_default,$(5),${GCC}) $(call get_value_default,$(4),${CFLAGS}) $($(3)_CFLAGS) -MM $(1) | ${PERL} -e '%PERL_DEP_HANDLE%' -- $(3)_DEPS > $(2),"DEPS","$(call get_basename,$(2))")
endef

#########################################
##  build_c
##            to build c into o
##  input value
##      1        output file
##      2        input c file 
##      3        for shortname handle
##      4        cflags
##      5        compiler default gcc
#########################################
define build_c
$(call call_exec_directly,$(call get_value_default,$(5),${GCC}) $(call get_value_default,$(4),${CFLAGS}) $($(3)_CFLAGS) -c $(2) -o $(1),"CC","$(call get_basename,$(1))")
endef


#########################################
##  build_cpp_depends
##            to build cpp depends
##  input value
##      1        input cpp file 
##      2        output depend file
##      3        for shortname handle
##      4        for common cppflags
##      5        for compiler default g++
#########################################
define build_cpp_depends
$(call call_exec_directly,$(call get_value_default,$(5),${GPP}) $(call get_value_default,$(4),${CPPFLAGS}) $($(3)_CPPFLAGS) -MM $(1) | ${PERL} -e '%PERL_DEP_HANDLE%' -- $(3)_DEPS > $(2),"DEPS","$(call get_basename,$(2))")
endef





#########################################
##  build_cpp
##            to build cpp into o
##  input value
##      1        output file
##      2        input cpp file 
##      3        for shortname handle
##      4        cppflags
##      5        compiler default g++
#########################################
define build_cpp
$(call call_exec_directly,$(call get_value_default,$(5),${GPP}) $(call get_value_default,$(4),${CPPFLAGS}) $($(3)_CPPFLAGS) -c $(2) -o $(1),"CPPC","$(call get_basename,$(1))")
endef

#########################################
##  build_S_depends
##            to build S depends
##  input value
##      1        input S file 
##      2        output depend file
##      3        for shortname handle
##      4        asflags
##      5        compiler default gcc
#########################################
define build_S_depends
$(call call_exec_directly,$(call get_value_default,$(5),${GAS}) $(call get_value_default,$(4),${ASFLAGS}) $($(3)_ASFLAGS) -MM $(1) | ${PERL} -e '%PERL_DEP_HANDLE%' --  $(3)_DEPS > $(2),"DEPS","$(call get_basename,$(2))")
endef


#########################################
##  build_S
##            to build S file into o
##  input value
##      1        output file
##      2        input S file 
##      3        for shortname handle
##      4        asflags
##      5        compiler default gcc
#########################################
define build_S
$(call call_exec_directly,$(call get_value_default,$(5),${GAS}) $(call get_value_default,$(4),${ASFLAGS}) $($(3)_ASFLAGS) -c $(2) -o $(1),"AS","$(call get_basename,$(1))")
endef


#########################################
##  input : $(1)   object file
##          $(2)   for C file
##          $(3)   shortname for c
##          $(4)   depends file
##          $(5)   cflags
##          $(6)   gcc or compiler
#########################################
define make_c_rules
-include $(4)
$(1): $(2) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_c,$$@,$$<,$(3),$(5),$(6))


$(4): $${$(3)_DEPS} $$(MAKEDEPS)
	$${Q}$$(call build_c_depends,$(2),$(4),$(3),$(5),$(6))
endef


#########################################
##  input : $(1)   src file
##          $(2)   link file
#########################################
define link_c_file
$(call call_exec_directly,if [ -e $(2) ];then ${RM} -f $(2);fi;${LN} -s $(1) $(2),"LINK","$(call get_basename,$(2))")
endef

#########################################
##  input : $(1)   src file
##          $(2)   link file
#########################################
define link_cpp_file
$(call call_exec_directly,if [ -e $(2) ];then ${RM} -f $(2);fi;${LN} -s $(1) $(2),"LINK","$(call get_basename,$(2))")
endef

#########################################
##  input : $(1)   src file
##          $(2)   link file
#########################################
define link_S_file
$(call call_exec_directly,if [ -e $(2) ];then ${RM} -f $(2);fi;${LN} -s $(1) $(2),"LINK","$(call get_basename,$(2))")
endef

#########################################
##  input : $(1)   object file
##          $(2)   for C file
##          $(3)   shortname for c
##          $(4)   depends file
##          $(5)   cflags
##          $(6)   gcc or compiler
#########################################
define make_link_c_rules
-include $(4)
$(1): $(2) $$(MAKEDEPS) $$($(3)_DEPS) $$($(3)_SRC)
	$${Q}$$(call build_c,$$@,$$<,$(3),$(5),$(6))


$(4): $$($(3)_DEPS) $$($(3)_SRC)
	$${Q}$$(call link_c_file,$$($(3)_SRC),$(2))
	$${Q}$$(call build_c_depends,$(2),$(4),$(3),$(5),$(6))
endef


#########################################
##  input : $(1)   src file
##          $(2)   link file
#########################################
define link_S_file
$(call call_exec_directly,if [ -e $(2) ];then ${RM} -f $(2);fi;${LN} -s $(1) $(2),"LINK","$(call get_basename,$(2))")
endef

#########################################
##  input : $(1)   object file
##          $(2)   for S file
##          $(3)   shortname for S
##          $(4)   depends file
##          $(5)   cflags
##          $(6)   gcc or compiler
#########################################
define make_link_S_rules
-include $(4)
$(1): $(2) $$(MAKEDEPS) $$($(3)_DEPS) $$($(3)_SRC)
	$${Q}$$(call build_S,$$@,$$<,$(3),$(5),$(6))


$(4): $$($(3)_DEPS) $$($(3)_SRC)
	$${Q}$$(call link_S_file,$$($(3)_SRC),$(2))
	$${Q}$$(call build_S_depends,$(2),$(4),$(3),$(5),$(6))
endef


#########################################
##  input : $(1)   object file
##          $(2)   for C file
##          $(3)   shortname for c
##          $(4)   depends file
##          $(5)   cflags
##          $(6)   gcc or compiler
#########################################
define make_S_rules
-include $(4)
$(1): $(2) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_S,$$@,$$<,$(3),$(5),$(6))

$(4):$$($(3)_DEPS) $$(MAKEDEPS)
	$${Q}$$(call build_S_depends,$(2),$(4),$(3),$(5),$(6))
endef

#########################################
##  input : $(1)   lists for c file
##          $(2)   cflags
##          $(3)   gcc or compiler
#########################################
define foreach_c_file_basic
$(foreach cursrc,$(1),$(eval $(call build_objs_c,$(patsubst %.c,%.o,$(cursrc)),$(cursrc),$(call get_shortname,${cursrc}),${cursrc}.d,$(2),$(3))))
endef

#########################################
##  input : $(1)   lists for c file
##          $(2)   basedir
##          $(3)   cflags
##          $(4)   gcc or compiler
#########################################
define foreach_c_file_shortname
$(foreach cursrc,$(1),$(eval $(call build_objs_c,$(patsubst %.c,%.o,$(cursrc)),$(cursrc),$(call get_shortname,$(cursrc),$(2)),${cursrc}.d,$(3),$(4))))
endef

#########################################
##  input : $(1)   lists for c link file
##          $(2)   cflags
##          $(3)   gcc or compiler
#########################################
define foreach_link_c_file_basic
$(foreach cursrc,$(1),$(eval $(call build_objs_link_c,$(patsubst %.c,%.o,$(cursrc)),$(cursrc),$(call get_shortname,${cursrc}),${cursrc}.d,$(2),$(3))))
endef

#########################################
##  input : $(1)   lists for c  link file
##          $(2)   basedir
##          $(3)   cflags
##          $(4)   gcc or compiler
#########################################
define foreach_link_c_file_shortname
$(foreach cursrc,$(1),$(eval $(call build_objs_link_c,$(patsubst %.c,%.o,$(cursrc)),$(cursrc),$(call get_shortname,$(cursrc),$(2)),${cursrc}.d,$(3),$(4))))
endef


#########################################
##  input : $(1)   lists for S file
##          $(2)   cflags
##          $(3)   gcc or compiler
#########################################
define foreach_S_file_basic
$(foreach cursrc,$(1),$(eval $(call build_objs_S,$(patsubst %.S,%.o,$(cursrc)),$(cursrc),$(call get_shortname,${cursrc}),${cursrc}.d,$(2),$(3))))
endef

#########################################
##  input : $(1)   lists for S file
##          $(2)   basedir
##          $(3)   cflags
##          $(4)   gcc or compiler
#########################################
define foreach_S_file_shortname
$(foreach cursrc,$(1),$(eval $(call build_objs_S,$(patsubst %.S,%.o,$(cursrc)),$(cursrc),$(call get_shortname,$(cursrc),$(2)),${cursrc}.d,$(3),$(4))))
endef

#########################################
##  input : $(1)   lists for S link file
##          $(2)   cflags
##          $(3)   gcc or compiler
#########################################
define foreach_link_S_file_basic
$(foreach cursrc,$(1),$(eval $(call build_objs_link_S,$(patsubst %.S,%.o,$(cursrc)),$(cursrc),$(call get_shortname,${cursrc}),${cursrc}.d,$(2),$(3))))
endef

#########################################
##  input : $(1)   lists for S  link file
##          $(2)   basedir
##          $(3)   cflags
##          $(4)   gcc or compiler
#########################################
define foreach_link_S_file_shortname
$(foreach cursrc,$(1),$(eval $(call build_objs_link_S,$(patsubst %.S,%.o,$(cursrc)),$(cursrc),$(call get_shortname,$(cursrc),$(2)),${cursrc}.d,$(3),$(4))))
endef



define ld_run_direct
$(call call_exec,$(call get_value_default,$(5),${GPP}) $(3) -o $(1) $(2) $(4),"LD","$(call get_basename,$(1))")
endef

define build_exe_only
$(1) : $(2)
	$(call ld_run_direct,$(1),$(2),$(3),$(4),$(5))
endef

#$(info "cobj[$(1)] csrc[$(2)] shortname[$(3)]  deps[$(4)] cflags[$(5)] compiler[$(6)]")
define build_objs_c
-include $(4)
$(1): $(2) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_c,$$@,$$<,$(3),$(5),$(6))


$(4): $${$(3)_DEPS} $$(MAKEDEPS)
	$${Q}$$(call build_c_depends,$(2),$(4),$(3),$(5),$(6))
endef


#$(info "cppobj[$(1)] cppsrc[$(2)] shortname[$(3)]  deps[$(4)] cppflags[$(5)] compiler[$(6)]")
define build_objs_cpp
-include $(4)
$(1): $(2) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_cpp,$$@,$$<,$(3),$(5),$(6))


$(4): $${$(3)_DEPS} $$(MAKEDEPS)
	$${Q}$$(call build_cpp_depends,$(2),$(4),$(3),$(5),$(6))
endef

#$(info "Sobj[$(1)] Ssrc[$(2)] shortname[$(3)]  deps[$(4)] sflags[$(5)] compiler[$(6)]")
define build_objs_S
-include $(4)
$(1) : $(2) $(4) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_S,$(1),$(2),$(3),$(5),$(6))

$(4) : $$($(3)_DEPS)
	$${Q}$$(call build_S_depends,$(2),$(4),$(3),$(5),$(6))
endef

#$(info "cobj[$(1)] csrc[$(2)] shortname[$(3)]  deps[$(4)] cflags[$(5)] compiler[$(6)]")
define build_objs_link_c
-include $(4)
$(1) : $(2) $(4) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_c,$(1),$(2),$(3),$(5),$(6))

$(4) : $$($(3)_DEPS) $$($(3)_SRC)
	$${Q}$$(call link_c_file,$$($(3)_SRC),$(2))
	$${Q}$$(call build_c_depends,$(2),$(4),$(3),$(5),$(6))
endef



#$(info "cppobj[$(1)] cppsrc[$(2)] shortname[$(3)]  deps[$(4)] cppflags[$(5)] compiler[$(6)]")
define build_objs_link_cpp
-include $(4)
$(1) : $(2) $(4) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_cpp,$(1),$(2),$(3),$(5),$(6))

$(4) : $$($(3)_DEPS) $$($(3)_SRC)
	$${Q}$$(call link_cpp_file,$$($(3)_SRC),$(2))
	$${Q}$$(call build_cpp_depends,$(2),$(4),$(3),$(5),$(6))
endef

#$(info "Sobj[$(1)] Ssrc[$(2)] shortname[$(3)]  deps[$(4)] asflags[$(5)] compiler[$(6)]")
define build_objs_link_S
-include $(4)
$(1) : $(2) $(4) $$(MAKEDEPS) $$($(3)_DEPS)
	$${Q}$$(call build_S,$(1),$(2),$(3),$(5),$(6))

$(4) : $$($(3)_DEPS) $$($(3)_SRC)
	$${Q}$$(call link_S_file,$$($(3)_SRC),$(2))
	$${Q}$$(call build_S_depends,$(2),$(4),$(3),$(5),$(6))
endef

define build_clean_exe_only
$(call call_exec,${RM} -f $(1),"RM","$(call get_basename,$(1))")
endef



#####################################
##  input $(1)  src files
##        $(2)  shortname
##        $(3)  flags
##        $(4)  compiler
#####################################
define foreach_build_objs_c
$(foreach cursrc,$(1),\
$(eval $(call build_objs_c,$(call get_toobj,$(cursrc),\
${PWD},$($(2)_BINDIR)),$(cursrc),$(call get_shortname,$(cursrc),$($(2)_BASEDIR)),$(call get_depname,$(cursrc),${PWD},$($(2)_BINDIR)),$(3),$(4))))
endef

#####################################
##  input $(1)  src files
##        $(2)  shortname
##        $(3)  flags
##        $(4)  compiler
#####################################
define foreach_build_objs_cpp
$(foreach cursrc,$(1),\
$(eval $(call build_objs_cpp,$(call get_toobj,$(cursrc),\
${PWD},$($(2)_BINDIR)),$(cursrc),$(call get_shortname,$(cursrc),$($(2)_BASEDIR)),$(call get_depname,$(cursrc),${PWD},$($(2)_BINDIR)),$(3),$(4))))
endef

#####################################
##  input $(1)  src files
##        $(2)  shortname
##        $(3)  flags
##        $(4)  compiler
#####################################
define foreach_build_objs_S
$(foreach cursrc,$(1),\
$(eval $(call build_objs_S,$(call get_toobj,$(cursrc),\
${PWD},$($(2)_BINDIR)),$(cursrc),$(call get_shortname,$(cursrc),$($(2)_BASEDIR)),$(call get_depname,$(cursrc),${PWD},$($(2)_BINDIR)),$(3),$(4))))
endef


#####################################
##  input $(1)  src files
##        $(2)  shortname
##        $(3)  flags
##        $(4)  compiler
#####################################
define foreach_build_objs_link_c
$(foreach cursrc,$(1),\
$(eval $(call build_objs_link_c,$(call get_toobj,$(cursrc),\
${PWD},$($(2)_BINDIR)),$(cursrc),$(call get_shortname,$(cursrc),$($(2)_BASEDIR)),$(call get_depname,$(cursrc),${PWD},$($(2)_BINDIR)),$(3),$(4))))
endef

#####################################
##  input $(1)  src files
##        $(2)  shortname
##        $(3)  flags
##        $(4)  compiler
#####################################
define foreach_build_objs_link_S
$(foreach cursrc,$(1),\
$(eval $(call build_objs_link_S,$(call get_toobj,$(cursrc),\
${PWD},$($(2)_BINDIR)),$(cursrc),$(call get_shortname,$(cursrc),$($(2)_BASEDIR)),$(call get_depname,$(cursrc),${PWD},$($(2)_BINDIR)),$(3),$(4))))
endef

#####################################
##  input $(1)  src files
##        $(2)  shortname
##        $(3)  flags
##        $(4)  compiler
#####################################
define foreach_build_objs_link_cpp
$(foreach cursrc,$(1),\
$(eval $(call build_objs_link_cpp,$(call get_toobj,$(cursrc),\
${PWD},$($(2)_BINDIR)),$(cursrc),$(call get_shortname,$(cursrc),$($(2)_BASEDIR)),$(call get_depname,$(cursrc),${PWD},$($(2)_BINDIR)),$(3),$(4))))
endef

define __make_target_sources
$(call foreach_build_objs_c,$(call get_cfile,$($(1)_SRCS)),$(1),$(call get_value_default,$($(1)_CFLAGS),${CFLAGS}),$($(1)_GCC))
$(call foreach_build_objs_cpp,$(call get_cppfile,$($(1)_SRCS)),$(1),\
$(call get_value_default_4,$($(1)_CPPFLAGS),$($(1)_CFLAGS),${CPPFLAGS},${CFLAGS}),$($(1)_GPP))
$(call foreach_build_objs_S,$(call get_sfile,$($(1)_SRCS)),$(1),\
$(call get_value_default_4,$($(1)_ASFLAGS),$($(1)_CFLAGS),${ASFLAGS},${CFLAGS}),$($(1)_GAS))
$(call foreach_build_objs_link_c,$(call get_lcfile,$($(1)_SRCS)),$(1),\
$(call get_value_default,$($(1)_CFLAGS),${CFLAGS}),$($(1)_GCC))
$(call foreach_build_objs_link_S,$(call get_lsfile,$($(1)_SRCS)),$(1),\
$(call get_value_default_4,$($(1)_ASFLAGS),$($(1)_CFLAGS),${ASFLAGS},${CFLAGS}),$($(1)_GAS))
$(call foreach_build_objs_link_cpp,$(call get_lcppfile,$($(1)_SRCS)),$(1),\
$(call get_value_default_4,$($(1)_CPPFLAGS),$($(1)_CFLAGS),${CPPFLAGS},${CFLAGS}),$($(1)_GPP))
endef

define __make_exe_whole
$(call build_exe_only,$(1),$(call get_toobj,$($(2)_SRCS)),$($(2)_LDFLAGS),$($(2)_LIBFLAGS),$($(2)_LD))
$(call __make_target_sources,$(2))
endef
ifeq (${MAKELIB_NEED_DEPS},1)

define make_exe_whole
$(eval $(call __make_exe_whole,$(1),$(call get_exename,$(1))))
endef

else

define make_exe_whole
endef

endif

define __clean_exe_whole
clean_$(2):
	$(call call_exec,${RM} -f $(call get_lcppfile,$($(2)_SRCS)),"RM","$(2)_lcppfiles")
	$(call call_exec,${RM} -f $(call get_lsfile,$($(2)_SRCS)),"RM","$(2)_lsfiles")
	$(call call_exec,${RM} -f $(call get_lcfile,$($(2)_SRCS)),"RM","$(2)_lcfiles")
	$(call call_exec,${RM} -f $(call get_depname,$($(2)_SRCS)),"RM","$(2)_deps")
	$(call call_exec,${RM} -f $(call get_toobj,$($(2)_SRCS)),"RM","$(2)_objs")
	$(call call_exec,${RM} -f $(1),"RM","$(call get_basename,$(1))")
endef

define clean_exe_whole
$(eval $(call __clean_exe_whole,$(1),$(call get_exename,$(1))))
endef

define makefile_exe_whole
$(eval $(call make_exe_whole,$(1)))
$(eval $(call clean_exe_whole,$(1)))
endef

define foreach_makefile_exe_whole
$(foreach curexe,$(1),$(eval $(call makefile_exe_whole,$(curexe))))
endef

define __simple_makefile_exe_whole
$(call foreach_makefile_exe_whole,jjk main)
endef

define simple_makefile_exe_whole
$(eval $(call __simple_makefile_exe_whole,$(1)))
endef



## __DEPENDS_OP_MAK__ ##
endif