#! /bin/bash

##################
# parse args for init
#
##################

verbose=0
password=""
user=$USER
mntdir=/mnt/smbdir
bindir=$HOME/bin
remotedir=share
ENVOS=""

%DEFINESH_CODE%

%DEBUGSH_CODE%

CheckOS()
{
	local _os
	local _ubuntu
	local _centos
	if [ -f "/etc/os-release" ]
		then
		_os=`cat /etc/os-release | grep -e '^NAME=' | awk -F= '{print $2}'`
		_ubuntu=`echo "$_os" | grep -i ubuntu`
		_centos=`echo "$_os" | grep -i centos`
		if [ -n "$_ubuntu" ]
			then
			ENVOS=ubuntu
		elif [ -n "$_centos" ]
			then
			ENVOS=centos
		else
			ErrorExit 4 "not get os in /etc/os-release"
		fi
	else
		ErrorExit 4 "no /etc/os-release found"
	fi
}

CheckPackageUbuntu()
{
	local _pkg=$1
	local _res
	dpkg -l $_pkg 2>/dev/null >/dev/null
	if [ $? -eq 0 ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

CheckPackageCentOS()
{
	local _pkg=$1
	local _res
	rpm -q $_pkg 2>/dev/null >/dev/null
	_res=$?
	if [ $_res -eq 0 ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

CheckPackage()
{
	local _res=0
	local _pkg=$1

	if [ "$ENVOS"  = "ubuntu" ]
		then
		CheckPackageUbuntu "$_pkg"
	elif [ "$ENVOS" = "centos" ]
		then
		CheckPackageCentOS "$_pkg"
	else
		Error 4 "not supported os [$ENVOS]"
	fi
}

CheckPackageMustSucc()
{
	local _res=0
	local _pkg=$1
	$_res=$( CheckPackage "$_pkg" )
	if [ $_res -ne 0 ]
		then
		ErrorExit 4 "[$_pkg] not installed"
	fi
}


TestSudo()
{
	local _res
	_res=0
	sudo -A ls -l
	_res=$? 
	if [ $_res -ne 0 ]
		then
		cat <<EOFMM>> /dev/stderr
you must use visudo to add line to enable no password call sudo
$USER ALL = NOPASSWD: ALL
EOFMM
		exit 4
	fi
}

RunSudoNoOut()
{
	local _res=0
	sudo -A $@ >/dev/null
	_res=$?
	echo "$_res"
	return
}

RunSudoOutput()
{
	sudo -A $@
	return
}

RunSudoMustSucc()
{
	local _args=$@
	local _res=0
	Debug "run [$*]"
	_res=$(RunSudoNoOut $@)
	Debug "_res [$_res]"
	if [ $_res -ne 0 ]
		then
		echo "can not run [$@] [$_res]" >/dev/stderr
		exit 4
	fi
}

RunMustSucc()
{
	local _res
	$@ >/dev/null 2>/dev/null
	_res=$?
	if [ $_res -ne 0 ]
		then
		ErrorExit 4 "can not run [$*]"
	fi
}



InstallPackageUbuntu()
{
	local _pkg=$1
	RunSudoMustSucc apt-get install -y "$_pkg"
}

InstallPackageCentOS()
{
	local _pkg=$1
	RunSudoMustSucc yum install -y "$_pkg"
}

InstallPackage()
{
	local _pkg=$1
	if [ "$ENVOS"  = "ubuntu" ]
		then
		InstallPackageUbuntu "$_pkg"
	elif [ "$ENVOS" = "centos" ]
		then
		InstallPackageCentOS "$_pkg"
	else
		Error 4 "not supported os [$ENVOS]"
	fi
}

CheckOrInstallMustSucc()
{
	local _res
	local _pkg=$1
	_res=$(CheckPackage "$_pkg")
	if [ $_res -ne 0 ]
		then
		InstallPackage "$_pkg"
	fi
}

InstallUpgradePIPPackage()
{
	local _pkg=$1
	RunSudoMustSucc pip install $_pkg	
}

CheckOrCloneDir()
{
	local _url=$1
	local _clonedir=$2
	local _res
	if [ -z "$_clonedir" ]
		then
		_clonedir=`basename $_url | sed 's/\.git$//'`
	fi
	if [ ! -d "{PWD}/${_clonedir}/.git" ]
		then
		if [ ! -d "${PWD}/${_clonedir}" ]
			then
			git clone "$_url"
			_res=$?
			if [ $_res -ne 0 ]
				then
				ErrorExit 4 "can not clone[$_url] [$_res]"
			fi
		fi
	fi
	return
}

CheckIfHomeDir()
{
	local _dir=$1
	local _isok
	local _adir=`readlink -f $_dir`
	_isok=`echo "$_adir" | grep -e '^${HOME}'`
	if [ "$_isok" = "$_adir" ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

RunDstMustSucc()
{
	local -a _args
	local _i=0
	local _ishome=0
	while [ $# -gt 0 ]
	do
		_args[$_i]=$1
		shift
		_i=`expr $_i + 1`
	done
	Debug "_args [${_args[*]}]"
	_ishome=$(CheckIfHomeDir "$bindir")
	if [ $_ishome -gt 0 ]
		then
		RunMustSucc ${_args[@]}
	else
		RunSudoMustSucc ${_args[@]}
	fi
}


CopyOnDstDir()
{
	local _src=$1
	Debug "src [$_src]"
	if [  -d "$_src" ]
		then
		RunDstMustSucc cp -r "$_src" "$bindir"
	elif [ -f "$_src" ]
		then
		RunDstMustSucc cp "$_src" "$bindir"
	fi

	return

}

CheckCPANCentOS()
{
	local _res
	_res=$(RunSudoNoOut sudo timeout 1 sudo cpan -J)
	if [ $_res -ne 0 ]
		then
		# to make the cpan init
		( echo y;echo o conf prerequisites_policy follow;echo o conf commit ) | sudo cpan
		_res=$?
		if [ $_res -ne 0 ]
			then
			ErrorExit 4 "can not run cpan init ok [$_res]"
		fi
	fi
}

CPANInstall()
{
	local _pkg=$1
	RunSudoMustSucc cpan install "$_pkg"
}


Usage()
{
	_ec=$1
	_fmt=$2
	_echoout=/dev/stderr
	if [ $_ec -eq 0 ]
	then
		_echoout=/dev/stdout
	fi

	if [ -n "$_fmt" ]
		then
		echo -e "$_fmt" >$_echoout
	fi

	echo -e "initcp [OPTIONS]" >$_echoout
	echo -e "\t--help|-h                          to display this help information" >$_echoout
	echo -e "\t--verbose|-v                       to make verbose mode" >$_echoout
	echo -e "\t--password|-p [password]           to specify the password on mountint default[]" >$_echoout
	echo -e "\t--user|-u  [username]              to specify the username default[${USER}]" >$_echoout
	echo -e "\t--mntdir|-d [dir]                  to specify the mount direcotry default[/mnt/smbdir]" >$_echoout
	echo -e "\t--bindir|-D [dir]                  to specify the bin dir default[$HOME/bin]" >$_echoout
	echo -e "\t--remotedir|-r [dir]               to specify remote dir default[share]" >$_echoout
	exit $_ec
}

while [ $# -gt 0 ]
do
	_curarg=$1
	if [ "$_curarg" = "--help" ] || [ "$_curarg" = "-h" ]
		then
		Usage 0 ""
	elif [ "$_curarg" = "--verbose" ] || [ "$_curarg" = "-v" ]
		then
		verbose=`expr $verbose + 1`
	elif [ "$_curarg" = "--password" ] || [ "$_curarg" = "-p" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		password=$2
		shift
	elif [ "$_curarg" = "--user" ] || [ "$_curarg" = "-u" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		user=$2
		shift
	elif [ "$_curarg" = "--mntdir" ] || [ "$_curarg" = "-d" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		mntdir=$2
		shift
	elif [ "$_curarg" = "--bindir" ] || [ "$_curarg" = "-D" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		bindir=$2
		shift
	elif [ "$_curarg" = "--remotedir" ] || [ "$_curarg" = "-r" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		remotedir=$2
		shift

	else
		Usage 3 "unknown args[$_curarg]"
	fi
	shift
done

CheckOS
CheckOrInstallMustSucc cifs-utils

if [ "$ENVOS" = "centos" ]
	then
	CheckOrInstallMustSucc epel-release
	CheckOrInstallMustSucc perl-CPAN
	CheckCPANCentOS
	CPANInstall Data::Dumper
fi

CheckOrInstallMustSucc python-pip
CheckOrInstallMustSucc git
InstallUpgradePIPPackage extargsparse
InstallUpgradePIPPackage disttools

CheckOrCloneDir https://github.com/jeppeter/extargsparse4sh.git
CheckOrCloneDir https://github.com/jeppeter/shlib.git


if [ ! -d "$bindir" ]
	then
	mkdir -p $bindir
fi
# now to make the extargsparse4sh
export PATH=$PATH:$bindir
( pushd ${PWD} && cd extargsparse4sh && make   && popd  ) || ErrorExit 4 "can not make extargsparse4sh"
CopyOnDstDir extargsparse4sh/extargsparse4sh
( pushd ${PWD} && cd shlib/sshsmbmount && make  && popd ) || ErrorExit 4 "can not make sshsmbmount"
CopyOnDstDir shlib/sshsmbmount/sshsmbmount
( pushd ${PWD} && cd shlib/cpfuncs && make && popd ) || ErrorExit 4 "can not make cpfuncs"
CopyOnDstDir shlib/cpfuncs/cpfuncs
CopyOnDstDir shlib/cpfuncs/cpin
CopyOnDstDir shlib/cpfuncs/cpout

if [ ! -d "$mntdir" ]
	then
	RunSudoMustSucc mkdir -p $mntdir
fi


# now we should to make the run ok
cat <<EOFMM>> $HOME/.bashrc
export PATH=\$PATH:$bindir

if [ -n "\$SSH_CLIENT" ]
then
        _remoteip=\$(echo "\$SSH_CLIENT" | awk '{print \$1}')
        $bindir/sshsmbmount -r "//\$_remoteip/$remotedir" -d "$mntdir" "$password" "$user"
fi
EOFMM


