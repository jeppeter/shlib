#! /bin/bash

##################
# parse args for init
#
##################

verbose=0
password=""
user=$USER
mntdir=/mnt/smbdir
bindir=$HOME/bin
remotedir=share
ENVOS=""

%DEFINESH_CODE%

%DEBUGSH_CODE%

%RUNSH_CODE%

%PKGSH_CODE%

Usage()
{
	_ec=$1
	_fmt=$2
	_echoout=/dev/stderr
	if [ $_ec -eq 0 ]
	then
		_echoout=/dev/stdout
	fi

	if [ -n "$_fmt" ]
		then
		echo -e "$_fmt" >$_echoout
	fi

	echo -e "initcp [OPTIONS]" >$_echoout
	echo -e "\t--help|-h                          to display this help information" >$_echoout
	echo -e "\t--verbose|-v                       to make verbose mode" >$_echoout
	echo -e "\t--password|-p [password]           to specify the password on mountint default[]" >$_echoout
	echo -e "\t--user|-u  [username]              to specify the username default[${USER}]" >$_echoout
	echo -e "\t--mntdir|-d [dir]                  to specify the mount direcotry default[/mnt/smbdir]" >$_echoout
	echo -e "\t--bindir|-D [dir]                  to specify the bin dir default[$HOME/bin]" >$_echoout
	echo -e "\t--remotedir|-r [dir]               to specify remote dir default[share]" >$_echoout
	exit $_ec
}

while [ $# -gt 0 ]
do
	_curarg=$1
	if [ "$_curarg" = "--help" ] || [ "$_curarg" = "-h" ]
		then
		Usage 0 ""
	elif [ "$_curarg" = "--verbose" ] || [ "$_curarg" = "-v" ]
		then
		verbose=`expr $verbose + 1`
	elif [ "$_curarg" = "--password" ] || [ "$_curarg" = "-p" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		password=$2
		shift
	elif [ "$_curarg" = "--user" ] || [ "$_curarg" = "-u" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		user=$2
		shift
	elif [ "$_curarg" = "--mntdir" ] || [ "$_curarg" = "-d" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		mntdir=$2
		shift
	elif [ "$_curarg" = "--bindir" ] || [ "$_curarg" = "-D" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		bindir=$2
		shift
	elif [ "$_curarg" = "--remotedir" ] || [ "$_curarg" = "-r" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		remotedir=$2
		shift

	else
		Usage 3 "unknown args[$_curarg]"
	fi
	shift
done

CheckOS
TestSudo
CheckOrInstallMustSucc perl
CheckOrInstallMustSucc cifs-utils

if [ "$ENVOS" = "centos" ]
	then
	CheckOrInstallMustSucc epel-release
	CheckOrInstallMustSucc perl-CPAN
	CheckCPANCentOS
	CPANInstall Data::Dumper
fi

CheckOrInstallMustSucc python-pip
CheckOrInstallMustSucc git
InstallUpgradePIPPackage extargsparse
InstallUpgradePIPPackage disttools
InstallUpgradePIPPackage insertcode

CheckOrCloneDir https://github.com/jeppeter/extargsparse4sh.git
CheckOrCloneDir https://github.com/jeppeter/shlib.git


if [ ! -d "$bindir" ]
	then
	mkdir -p $bindir
fi
# now to make the extargsparse4sh
export PATH=$PATH:$bindir
( pushd ${PWD} && cd extargsparse4sh && make   && popd  ) || ErrorExit 4 "can not make extargsparse4sh"
CopyOnDstDir extargsparse4sh/extargsparse4sh
( pushd ${PWD} && cd shlib/sshsmbmount && make  && popd ) || ErrorExit 4 "can not make sshsmbmount"
CopyOnDstDir shlib/sshsmbmount/sshsmbmount
( pushd ${PWD} && cd shlib/cpfuncs && make && popd ) || ErrorExit 4 "can not make cpfuncs"
CopyOnDstDir shlib/cpfuncs/cpfuncs
CopyOnDstDir shlib/cpfuncs/cpin
CopyOnDstDir shlib/cpfuncs/cpout

if [ ! -d "$mntdir" ]
	then
	RunSudoMustSucc mkdir -p $mntdir
fi


# now we should to make the run ok
cat <<EOFMM>> $HOME/.bashrc
export PATH=\$PATH:$bindir

if [ -n "\$SSH_CLIENT" ]
then
        _remoteip=\$(echo "\$SSH_CLIENT" | awk '{print \$1}')
        $bindir/sshsmbmount -r "//\$_remoteip/$remotedir" -d "$mntdir" "$password" "$user"
fi
EOFMM


