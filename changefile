#! /bin/bash

source extargsparse4sh

reserved=0

function clear_temp {
	if [ -n "$_tempfile" ] && [ -f "$_tempfile" ] && [ "$reserved" -eq 0 ]
		then
		rm -f "$_tempfile"
	fi
	return	
}


function finish_proc {
	clear_temp
	exit $exitcode
}


function unexpected_finish_proc {
	echo "error $1 has _tempfile [$_tempfile]" >&2
	exit 3
}

function ErrorExit {
	local _error=$1
	local _msg=$2

	exitcode=$_error
	echo "$_msg" >&2
	exit $exitcode
}

INFO_LEVEL=2
DEBUG_LEVEL=3
WARN_LEVEL=1
ERROR_LEVEL=0

function __Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        
        _fmtstr=""
        if [ $verbose -gt $INFO_LEVEL ]
                then
                _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
        fi

        _fmtstr="$_fmtstr$_fmt"
        ${ECHO} -e "$_fmtstr" >&2
}

function Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $DEBUG_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}


read -r -d '' OPTIONS<<EOFCODE
	{
		"verbose|v" : "+",
		"input|i" : null,
		"output|o" : null,
		"patternfile|P" : null,
		"replacepattern|p" : "%REPLACE_PATTERN%",
		"reserved|r" : false,
		"\$<VARARGS>" : 0
	}
EOFCODE

read -r -d '' AWK_REPL_STR<<EOFCC
{
	mexpr=sprintf(".*%s.*",replacekey);
	if (match(\$0,mexpr)) {
		gsub(replacekey,replacevalue);
		printf("%s\n",\$0);
	} else {
		printf("%s\n",\$0);
	}
}
EOFCC


parse_command_line "$OPTIONS" "$@"

exitcode=0
osname=`uname -s | tr [:upper:] [:lower:]`
if [ "$osname" = "darwin" ]
	then
	_tempfile=`mktemp /tmp/immediaXXXXXX`
else
	_tempfile=`mktemp --tmpdir=/tmp immediaXXXXXX`
fi



trap 'unexpected_finish_proc $LINENO' ERR
trap finish_proc EXIT


if [ -z "$patternfile" ]
	then
	ErrorExit 3 "please specify patternfile by (-P|--patternfile)"
fi


if [ -z "$input" ]
	then
	input=/dev/stdin
fi

Debug "output [$output]"

if [ -z "$output" ]
	then
	output=/dev/stdout
fi

if [ "$osname" = "darwin" ]
	then
	cat "$input"  | sed 's/\&/%anddollar%/g'  | sed 's/\$/%dollar%/g' | sed 's/\\/%backslash%/g' | sed 's/\`/%back_address%/g' > $_tempfile
else
	cat "$input"  | sed 's/\&/%anddollar%/g'  | sed 's/\$/%dollar%/g' | sed 's/\\/%backslash%/g' | sed 's/\x60/%back_address%/g' > $_tempfile
fi
replaceval=$(cat "$_tempfile" )
#Debug "replaceval ($replaceval)"
if [ "$osname" = "darwin" ]
	then
	gawk -v replacekey="$replacepattern" -v replacevalue="$replaceval" "$AWK_REPL_STR" $patternfile  | sed 's/%backslash%/\\\\/g' | sed 's/%dollar%/\\\$/g'  | sed 's/%anddollar%/\&/g' | sed 's/%back_address%/\\\`/g' >$output
else
	gawk -v replacekey="$replacepattern" -v replacevalue="$replaceval" "$AWK_REPL_STR" $patternfile  | sed 's/%backslash%/\\\\/g' | sed 's/%dollar%/\\\$/g'  | sed 's/%anddollar%/\&/g' | sed 's/%back_address%/\\\x60/g' >$output
fi
Debug "_tempfile [$_tempfile]"
exit 0