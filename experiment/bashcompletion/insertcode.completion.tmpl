#! /bin/bash

INSERTCODE_INFO_LEVEL=2
INSERTCODE_DEBUG_LEVEL=3
INSERTCODE_WARN_LEVEL=1
INSERTCODE_ERROR_LEVEL=0
INSERTCODE_MAX_UINT=0xffffffff
INSERTCODE_MAX_ULONGLONG=0xffffffffffffffff
INSERTCODE_MAX_INT=0x7ffffffff
INSERTCODE_MIN_INT=-0x7fffffff
INSERTCODE_MAX_LONGLONG=0x7fffffffffffffff
INSERTCODE_MIN_LONGLONG=0x7fffffffffffffff

INSERTCODE_PERL_EXTRACT_STR="use strict;my (\$cmd)=\"%INSERTCODE_PERL_EXTRACT_STR%\";eval \$cmd;"


_insertcode_debug()
{
	local _fmt="$1"
	shift
	local _backstack=0
	local _osname=`uname -s | tr [:upper:] [:lower:]`
	if [ $# -gt 0 ]
		then
		_backstack="$1"
	fi
	if [ -n "$INSERTCODE_DEBUG" ] && [ $INSERTCODE_DEBUG -gt 0 ]
		then
        
        _fmtstr=""
        if [ $INSERTCODE_DEBUG -gt $INSERTCODE_INFO_LEVEL ]
                then
                local _funcstack=`expr $_backstack \+ 1`
                if [ "${BASH_VERSINFO[0]}" -lt 4 ]
                        then
                        local _filestack=$_backstack
                        _fmtstr="[$_osname]${FUNCNAME[$_funcstack]}:${BASH_LINENO[$_backstack]} "
                else
                        _fmtstr="[$_osname]${FUNCNAME[$_funcstack]}:${BASH_LINENO[$_backstack]} "
                fi
                #echo "BASH_SOURCE [${BASH_SOURCE[@]}] BASH_LINENO [${BASH_LINENO[@]}] FUNCNAME [${FUNCNAME[@]}]" >&2
        fi 
        _fmtstr="$_fmtstr$_fmt"
        if [ "$_osname" = "darwin" ]
                then
                echo "$_fmtstr" >&2
        else
                echo -e "$_fmtstr" >&2
        fi
	fi
}

_insertcode_get_cmdname_needargs_longopt()
{
	local _cmdname="$1"
	if [ -z "$_cmdname" ]
		then
		echo "--input"
		echo "--output"
		echo "--pattern"
	elif [ "$_cmdname" = "bashinsert" ]
		then
		echo "--input"
		echo "--output"
		echo "--pattern"
	elif [ "$_cmdname"  = "bashstring" ]
		then
		echo "--input"
		echo "--output"
		echo "--pattern"
	elif [ "$_cmdname" = "makepython" ]
		then
		echo "--input"
		echo "--output"
		echo "--pattern"
	elif [ "$_cmdname" = "makeperl" ]
		then
		echo "--input"
		echo "--output"
		echo "--pattern"
	fi

	return
}

_insertcode_get_cmdname_noargs_longopt()
{
	local _cmdname="$1"
	if [ -z "$_cmdname" ]
		then
		echo "--verbose"
	elif [ "$_cmdname" = "bashinsert" ]
		then
		echo "--verbose"
	elif [ "$_cmdname"  = "bashstring" ]
		then
		echo "--verbose"
	elif [ "$_cmdname" = "makepython" ]
		then
		echo "--verbose"
	elif [ "$_cmdname" = "makeperl" ]
		then
		echo "--verbose"
	fi

	return
}

_insertcode_get_cmdname_noargs_shortopt()
{
	local _cmdname="$1"
	if [ -z "$_cmdname" ]
		then
		echo "v"
	elif [ "$_cmdname" = "bashinsert" ]
		then
		echo "v"
	elif [ "$_cmdname" = "bashstring" ]
		then
		echo "v"
	elif [ "$_cmdname" = "makepython" ]
		then
		echo "v"
	elif [ "$_cmdname" = "makeperl" ]
		then
		echo "v"
	fi
	return
}


_insertcode_get_cmdname_needargs_shortopt()
{
	local _cmdname="$1"
	if [ -z "$_cmdname" ]
		then
		echo "i"
		echo "o"
		echo "p"
	elif [ "$_cmdname" = "bashinsert" ]
		then
		echo "i"
		echo "o"
		echo "p"
	elif [ "$_cmdname" = "bashstring" ]
		then
		echo "i"
		echo "o"
		echo "p"
	elif [ "$_cmdname" = "makepython" ]
		then
		echo "i"
		echo "o"
		echo "p"
	elif [ "$_cmdname" = "makeperl" ]
		then
		echo "i"
		echo "o"
		echo "p"
	fi
	return
}

_insertcode_longopt_step()
{
	local _cmdname="$1"
	local _longopt="$2"
	local _curopt

	for _curopt in $(_insertcode_get_cmdname_needargs_longopt "$_cmdname")
	do
		if [ "$_curopt" = "$_longopt" ]
			then
			echo "1"
			return
		fi
	done

	for _curopt in $(_insertcode_get_cmdname_noargs_longopt "$_cmdname")
	do
		if [ "$_curopt" = "$_longopt" ]
			then
			echo "0"
			return
		fi
	done
	echo "-1"
	return
}

_insertcode_shortopt_step()
{
	local _cmdname="$1"
	local _shortopt="$2"
	local _curopt
	for _curopt in $(_insertcode_get_cmdname_needargs_shortopt "$_cmdname")
	do
		if [ "$_curopt" = "$_shortopt" ]
		then
			echo "1"
			return
		fi
	done

	for _curopt in $(_insertcode_get_cmdname_noargs_shortopt "$_cmdname")
	do
		if [ "$_curopt" = "$_shortopt" ]
		then
			echo "0"
			return
		fi
	done
	echo "-1"
	return
}

_insertcode_get_subcommands()
{
	local _cmdname="$1"
	if [ -z "$_cmdname" ]
		then
		echo "bashinsert"
		echo "bashstring"
		echo "makepython"
		echo "makeperl"
	elif [ -z "$_cmdname" = "bashinsert" ]
		then
		/bin/true
	elif [ "$_cmdname" = "bashstring" ]
		then
		/bin/true
	elif [ "$_cmdname" = "makepython" ]
		then
		/bin/true
	elif [ "$_cmdname" = "makeperl" ]
		then
		/bin/true
	fi
	return
}

_insertcode_parse_cmdname()
{
	local _compreplyfile="$1"
	local _i=1
	local _j
	local _cmdname=""
	local _curcmd=""
	local _curopt=""
	local _longoptmatch=""
	local _optmatch=""
	local _optlen
	local _curo
	local _geto
	local _shortoptargs
	local _needargs
	local _tempi
	local _matchedcmd

	while [ $_i -lt $COMP_CWORD ]
	do
		_shortoptargs=0
		_needargs=0
		_curopt=${COMP_WORDS[$_i]}
		_i=`expr $_i \+ 1`
		if [ -z "$_curopt" ]
			then
			continue
		fi

		_longoptmatch=`echo "$_curopt" | grep -Po -e "--(.*)"`
		_optmatch=`echo `
		if [ -n "$_longoptmatch" ]
			then
			if [ "$_longoptmatch" = "--" ]
			then
				_tempi=`expr $_i - 1`
				_cmdname="-${_tempi}-${_cmdname}"
				break
			fi

			_needargs=$(_insertcode_longopt_step "$_cmdname" "$_longoptmatch")
			if [ $_needargs -lt 0 ]
				then
				echo "$_longoptmatch invalid options" >>$_compreplyfile
				echo "--"
				return
			fi
			if [ $_needargs -gt 0 ]
				then
				_tempi=`expr $_i \+ 1`
				if [ $_tempi -ge $COMP_CWORD ]
					then
					break
				fi
				_i=$_tempi
			fi
		elif [ -n "$_optmatch" ]
			then

			_optlen=`echo "$_optmatch" | wc -c | tr -d [:space:]`
			_j=1
			while [ $_j -lt $_optlen ]
			do
				_matched=0
				_geto=`echo "$_curopt" | dd bs=1 count=1 skip=$_j 2>/dev/null`
				_needargs=$(_insertcode_shortopt_step "$_cmdname" "$_geto")
				if [ $_needargs -lt 0 ]
				then
					echo "[$_geto] not valid in $_optmatch" >>$_compreplyfile
					echo "--"
					return
				fi
				if [ $_needargs -gt 0 ]
					then
					if [ $_shortoptargs -gt 0 ]
					then
						echo "[$_optmatch] not need have opt args for [$_geto]" >>$_compreplyfile
						echo "--"
						return
					fi
					_shortoptargs=1
				fi
				_j=`expr $_j \+ 1`
			done

			if [ $_shortoptargs -gt 0 ]
			then
				_tempi=`expr $_i \+ 1`
				if [ $_tempi -ge $COMP_CWORD ]
				then
					break
				fi
				_i=$_tempi
			fi
		else
			# now to get the subcommand ,if not matched
			_matchedcmd=""
			for _curcmd in $(_insertcode_get_subcommands "$_cmdname")
			do
				if [ "$_curcmd" = "$_curopt" ]
				then
					_matchedcmd="$_curcmd"
					break
				fi
			done

			if [ -z "$_matchedcmd" ]
				then
				# it means the offset and cmdname
				_tempi=`expr $_i - 1`
				_cmdname="-${_tempi}-${_cmdname}"
				break
			fi
			if [ -z "$_cmdname" ]
				then
				_cmdname="${_matchedcmd}"
			else
				_cmdname="${_cmdname}.${_matchedcmd}"
			fi
		fi
	done

	# now we should give the 
	echo "$_cmdname"
	return
}

_insertcode_error_completion_function()
{
	local _compreplyfile="$1"
	shift
	local _cmd="$1"
	shift
	local -a _args="$@"
	local _str=""
	local _curopt
	local _curidx=0
	echo "can not parse cmd[$_cmd]" >>$_compreplyfile
	_str="["
	for _curopt in "$@"
	do
		if [ $_curidx -gt 0 ]
			then
			_str="${_str},"
		fi
		_str="${_str}${_curopt}"
		_curidx=`expr $_curidx \+ 1`
	done
	_str="${_str}]"
	echo "${_str}" >>$_compreplyfile
	return
}

_insertcode_add_cmdname_match()
{
	local _compreplyfile="$1"
	local _cmdname="$2"
	local _matchpattern=""
	local _matched
	local _shortmode
	local _longmode
	local _singlemode
	local _hasshortargs
	if [ $# -gt 2 ]
	then
		_matchpattern="$3"
	fi
	_oldifs=$IFS
	IFS=$'\n'
	for _curopt in $(_insertcode_get_cmdname_needargs_longopt "$_cmdname")
	do
		IFS=$_oldifs
		_matched="1"
		if [ -n "$_matchpattern" ]
			then
			_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "${_matchpattern}.*" "" "$_curopt")
		fi
		if [ -n "$_matched" ]
			then
			echo "$_curopt" >>$_compreplyfile
		fi
		IFS=$'\n'
	done
	IFS=$_oldifs
	IFS=$'\n'
	for _curopt in $(_insertcode_get_cmdname_noargs_longopt "$_cmdname")
	do
		IFS=$_oldifs
		_matched="1"
		if [ -n "$_matchpattern" ]
			then
			_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "${_matchpattern}.*" "" "$_curopt")
		fi
		if [ -n "$_matched" ]
			then
			echo "$_curopt" >>$_compreplyfile
		fi
		IFS=$'\n'
	done
	IFS=$_oldifs
	IFS=$'\n'
	_shortmode=1
	_singlemode=0
	if [ -n "$_matchpattern" ] 
		then
		#########################
		## if the last word is --longopt ,so we should not 
		## set for short opt handle
		#########################
		_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "--.*" "" "$_matchpattern")
		if [ -n "$_matched" ]
		then
			_shortmode=0
		fi

		if [ $_shortmode -gt 0 ]
			then
			################################
			## if the last word is not startswith - so no shortmode handle
			## if it startswith - so just single mode
			################################
			_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "-.*" "" "$_matchpattern")
			if [ -z "$_matched" ]
				then
				_shortmode=0
			else
				_singlemode=`echo "$_matchpattern" | wc -c | tr -d [:space:]`
				if [ $_singlemode -gt 1 ]
					then
					_singlemode=1
				else
					_singlemode=0
				fi
			fi
		fi
	fi

	if [ $_shortmode -gt 0 ]
	then
		_hasshortargs=0
		for _curopt in $(_insertcode_get_cmdname_needargs_shortopt "$_cmdname")
		then
			IFS=$_oldifs
			_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "(${_curopt})" "\$1" "$_matchpattern")
			if [ -n "$_matched" ]
				then
				_hasshortargs=1
				break
			fi
			IFS=$'\n'
		fi
		IFS=$_oldifs

		if [ $_hasshortargs -eq 0 ]
			then
			for _curopt in $(_insertcode_get_cmdname_needargs_shortopt "$_cmdname")
			do
				IFS=$_oldifs
				if [ $_singlemode -gt 0 ]
					then
					echo "${_curopt}" >>$_compreplyfile
				else
					echo "-${_curopt}" >>$_compreplyfile
				fi
				IFS=$'\n'
			done
			IFS=$_oldifs
		fi

		IFS=$'\n'
		for _curopt in $(_insertcode_get_cmdname_noargs_shortopt "$_cmdname")
		do
			IFS=$_oldifs
			if [ $_singlemode -gt 0 ]
				then
				echo "${_curopt}" >>$_compreplyfile
			else
				echo "-${_curopt}" >>$_compreplyfile
			fi
			IFS=$'\n'
		done
		IFS=$_oldifs
	fi

	return	
}

_insertcode_completion_int_function()
{
	local _compreplyfile="$1"
	shift
	local _option="$1"
	shift
	local _matchpattern=""
	local _matched=""
	if [ $# -gt 0 ]
		then
		_notice="$1"
		shift
	fi
	if [ -n "$_matchpattern" ]
		then
		_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "^([\d]+)\$" "\$1" "$_matchpattern")
		if [ -n "$_macthed" ]
			then
			if [ $_matched -gt  ]
			echo "[$_option]" >>$_compreplyfile
			echo "int number [$_matchpattern...]" >>$_compreplyfile
		else
			_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "^([x|X][\da-fA-F]+)\$" "\$1" "$_matchpattern" )
			if [ -n "$_matched" ]
				then
				echo "[$_option]" >>$_compreplyfile
				echo "int number [$_matchpattern...]" >>$_compreplyfile
			else
				_matched=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" "^(0[x|X][\da-fA-F]+)\$" "\$1" "$_matchpattern")
				if [ -n "$_matchpattern" ]
					then
					echo "[$_option]" >>$_compreplyfile
					echo "int number [$_matchpattern...]"  >>$_compreplyfile
				else
					echo "[$_option]" >>$_compreplyfile
					echo "not valid [$_matchpattern] for int number" >>$_compreplyfile
				fi
			fi
		fi
	else
		echo "[$_option]" >>$_compreplyfile
		echo "int number [0...]"  >>$_compreplyfile
	fi
	return
}

_insertcode_completion_float_function()
{
	local _compreplyfile="$1"
	shift
	local _options="$1"
	shift
	local _notice=""
	if [ $# -gt 0 ]
		then
		_notice="$1"
		shift
	fi
	if [ -n "$_notice" ]
		then
		echo "[$_options] $_notice" >>$_compreplyfile
	else
		echo "[$_options]" >>$_compreplyfile
	fi
	echo "float number [0.0 ...]"  >>$_compreplyfile
	return	
}

_insertcode_completion_string_function()
{
	local _compreplyfile="$1"
	shift
	local _options="$1"
	shift
	local _matchpattern=""
	if [ $# -gt 0 ]
		then
		_matchpattern="$1"
		shift
	fi
	if [ -n "$_notice" ]
		then
		echo "[$_options] $_notice" >>$_compreplyfile
	else
		echo "[$_options]" >>$_compreplyfile
	fi
	echo "string values"  >>$_compreplyfile
	return	
}



_insertcode_completion_get_pre

_insertcode_completion_previous_value_function()
{
	local _cmdname="$1"
	local _preopt="$2"

	
}

_insertcode_completion_common_function()
{
	local _compreplyfile="$1"
	shift
	local _cmd="$1"
	shift
	local _curopt
	local _oldifs
	if [ $# -eq 0 ]
		then

	elif [ $# -eq 1 ]
		then
		_oldifs=$IFS
		IFS=$'\n'
		for _curopt in $(_insertcode_get_cmdname_needargs_longopt "$_cmdname")
		do
			IFS=$_oldifs
			echo "$_curopt" >>$_compreplyfile
			IFS=$'\n'
		done
		IFS=$_oldifs

		IFS=$'\n'
		for _curopt in $(_insertcode_get_cmdname_noargs_longopt "$_cmdname")
		do
			IFS=$_oldifs
			echo "$_curopt" >>$_compreplyfile
			IFS=$'\n'
		done
		IFS=$_oldifs

		IFS=$'\n'
		for _curopt in $(_insertcode_get_cmdname_needargs_shortopt "$_cmdname")
		do
			IFS=$_oldifs
			echo "-${_curopt}" >>$_compreplyfile
			IFS=$'\n'
		done
		IFS=$_oldifs

		IFS=$'\n'
		for _curopt in $(_insertcode_get_cmdname_noargs_shortopt "$_cmdname")
		do
			IFS=$_oldifs
			echo "-${_curopt}" >>$_compreplyfile
			IFS=$'\n'
		done
		IFS=$_oldifs
	else
	fi

}

_insertcode_main_completion_function()
{
	_insertcode_completion_common_function "$@"
}

_insertcode_get_compreply_func()
{
	local _cmdname="$1"
	local _funcname="_insertcode_error_completion_function"
	if [ -z "$_cmdname" ]
		then
		_funcname="_insertcode_main_completion_function"
	elif [ "$_cmdname" = "bashstring" ]
		then
		_funcname="_insertcode_bashstring_completion_function"
	elif [ "$_cmdname" = "bashinsert" ]
		then
		_funcname="_insertcode_bashinsert_completion_function"
	elif [ "$_cmdname" = "shperl" ]
		then
		_funcname="_insertcode_shperl_completion_function"
	elif [ "$_cmdname" = "shpython" ]
		then
		_funcname="_insertcode_shpython_completion_function"
	elif [ "$_cmdname" = "makeperl" ]
		then
		_funcname="_insertcode_makeperl_completion_function"
	elif [ "$_cmdname" = "makepython" ]
		then
		_funcname="_insertcode_makepython_completion_function"
	fi
	echo "$_funcname"
	return
}

_insertcode_get_options()
{
	local _compreplyfile="$1"
	shift
	local _cmdname="$1"
	shift
	local _cmdfunc
	_cmdfunc=$(_insertcode_get_compreply_func "$_cmdname")




}

_insertcode_set_result()
{
	local _compreplyfile="$1"
	local _curopt
	local _oldifs
	local _cnt
	unset COMPREPLY
	declare -g -a COMPREPLY
	_oldifs=$IFS
	IFS=$'\n'
	for _curopt in $(cat "$_compreplyfile")
	do
		IFS=$_oldifs
		_cnt=${#COMPREPLY[@]}
		COMPREPLY[$_cnt]=$_curopt
		IFS=$'\n'
	done
	IFS=$_oldifs
	return
}


_insertcode()
{
	local _resfile=`mktemp`
	local _cmdname
	local _cmdidx
	local -a _mustpassargs
	local _argscnt
	local _curopt

	_cmdname=$(_insertcode_parse_cmdname "$_resfile")
	if [ "$_cmdname" = "--" ]
		then
		_insertcode_set_result "$_resfile"
		rm -f $_resfile
		return
	fi
	
	_cmdidx=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" '-([\d]+)-([\w\.]+)'  "\$1" "$_cmdname" )
	if [ -n "$_cmdidx" ]
		then
		# if it is in the 
		_cmdname=$(perl -e "$INSERTCODE_PERL_EXTRACT_STR" '-([\d]+)-([\w\.]+)' "\$2" "$_cmdname" )
		_argscnt=0
		while [ $_cmdidx -gt $COMP_CWORD ]
		do
			_mustpassargs[$_argscnt]=COMP_WORDS[$_cmdidx]
			_cmdidx=`expr $_cmdidx \+ 1`
			_argscnt=`expr $_argscnt \+ 1`
		done
	else
		_argscnt=0
		_cmdidx=`expr $COMP_CWORD - 1`
		if [ $_cmdidx -gt 0 ]
		then
			_mustpassargs[$_argscnt]=COMP_WORDS[$_cmdidx]
		fi		
	fi

	return
}

complete -F _insertcode insertcode