
CheckOS()
{
	local _os
	local _ubuntu
	local _centos
	if [ -f "/etc/os-release" ]
		then
		_os=`cat /etc/os-release | grep -e '^NAME=' | awk -F= '{print $2}'`
		_ubuntu=`echo "$_os" | grep -i ubuntu`
		_linaro=`echo "$_os" | grep -i linaro`
		_centos=`echo "$_os" | grep -i centos`
		if [ -n "$_ubuntu" ] 
			then
			ENVOS=ubuntu
		elif [ -n "$_linaro" ]
			then
			ENVOS=ubuntu
		elif [ -n "$_centos" ]
			then
			ENVOS=centos
		else
			ErrorExit 4 "not get os in /etc/os-release"
		fi
	else
		ErrorExit 4 "no /etc/os-release found"
	fi
}

CheckPackageUbuntu()
{
	local _pkg=$1
	local _res=`dpkg -l "$_pkg" | grep "$_pkg" | grep -e '^ii'  2>/dev/null`
	if [ -n "$_res" ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

CheckPackageCentOS()
{
	local _pkg=$1
	local _res
	rpm -q $_pkg 2>/dev/null >/dev/null
	_res=$?
	if [ $_res -eq 0 ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

CheckPackage()
{
	local _res=0
	local _pkg=$1

	if [ "$ENVOS"  = "ubuntu" ]
		then
		CheckPackageUbuntu "$_pkg"
	elif [ "$ENVOS" = "centos" ]
		then
		CheckPackageCentOS "$_pkg"
	else
		Error 4 "not supported os [$ENVOS]"
	fi
}

CheckPackageMustSucc()
{
	local _res=0
	local _pkg=$1
	$_res=$( CheckPackage "$_pkg" )
	if [ $_res -ne 0 ]
		then
		ErrorExit 4 "[$_pkg] not installed"
	fi
}

InstallPackageUbuntu()
{
	local _pkg=$1
	RunSudoMustSucc apt-get install -y "$_pkg"
}

InstallPackageCentOS()
{
	local _pkg=$1
	RunSudoMustSucc yum install -y "$_pkg"
}

InstallPackage()
{
	local _pkg=$1
	if [ "$ENVOS"  = "ubuntu" ]
		then
		InstallPackageUbuntu "$_pkg"
	elif [ "$ENVOS" = "centos" ]
		then
		InstallPackageCentOS "$_pkg"
	else
		Error 4 "not supported os [$ENVOS]"
	fi
}

CheckOrInstallMustSucc()
{
	local _res
	local _pkg=$1
	_res=$(CheckPackage "$_pkg")
	if [ $_res -ne 0 ]
		then
		InstallPackage "$_pkg"
	fi
}

InstallUpgradePIPPackage()
{
	local _pkg=$1
	RunSudoMustSucc pip install $_pkg	
}

CheckOrCloneDir()
{
	local _url=$1
	local _clonedir=$2
	local _res
	if [ -z "$_clonedir" ]
		then
		_clonedir=`basename $_url | sed 's/\.git$//'`
	fi
	if [ ! -d "{PWD}/${_clonedir}/.git" ]
		then
		if [ ! -d "${PWD}/${_clonedir}" ]
			then
			git clone "$_url"
			_res=$?
			if [ $_res -ne 0 ]
				then
				ErrorExit 4 "can not clone[$_url] [$_res]"
			fi
		fi
	fi
	return
}

CheckIfHomeDir()
{
	local _dir=$1
	local _isok
	local _adir=`readlink -f $_dir`
	_isok=`echo "$_adir" | grep -e '^${HOME}'`
	if [ "$_isok" = "$_adir" ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

RunDstMustSucc()
{
	local -a _args
	local _i=0
	local _ishome=0
	while [ $# -gt 0 ]
	do
		_args[$_i]=$1
		shift
		_i=`expr $_i + 1`
	done
	Debug "_args [${_args[*]}]"
	_ishome=$(CheckIfHomeDir "$bindir")
	if [ $_ishome -gt 0 ]
		then
		RunMustSucc ${_args[@]}
	else
		RunSudoMustSucc ${_args[@]}
	fi
}

CopyOnDstDir()
{
	local _src=$1
	Debug "src [$_src]"
	if [  -d "$_src" ]
		then
		RunDstMustSucc cp -r "$_src" "$bindir"
	elif [ -f "$_src" ]
		then
		RunDstMustSucc cp "$_src" "$bindir"
	fi

	return

}

CheckCPANCentOS()
{
	local _res
	_res=$(RunSudoNoOut sudo timeout 1 sudo cpan -J)
	if [ $_res -ne 0 ]
		then
		# to make the cpan init
		( echo y;echo o conf prerequisites_policy follow;echo o conf commit ) | sudo cpan
		_res=$?
		if [ $_res -ne 0 ]
			then
			ErrorExit 4 "can not run cpan init ok [$_res]"
		fi
	fi
}

CPANInstall()
{
	local _pkg=$1
	RunSudoMustSucc cpan install "$_pkg"
}

