#! /usr/bin/env python

import extargsparse
import logging
import os
import sys

def set_log_level(args):
    loglvl= logging.ERROR
    if args.verbose >= 3:
        loglvl = logging.DEBUG
    elif args.verbose >= 2:
        loglvl = logging.INFO
    elif args.verbose >= 1 :
        loglvl = logging.WARN
    # we delete old handlers ,and set new handler
    logging.basicConfig(level=loglvl,format='%(asctime)s:%(filename)s:%(funcName)s:%(lineno)d\t%(message)s')
    return

def read_file(infile=None):
	s = ''
	fin = sys.stdin
	if infile is not None:
		fin = open(infile,'rb')
	for l in fin:
		s += l

	if fin != sys.stdin:
		fin.close()
	fin = None
	return s

def write_file(s,outfile=None):
	fout = sys.stdout
	if outfile is not None:
		fout = open(outfile,'wb')
	fout.write('%s'%(s))

	if fout != sys.stdout:
		fout.close()
	fout = None
	return

def 


def format_handler(args,parser):
    if args.prefix is None:
        raise Exception('please specified release')
    if args.jsonstr is None:
        args.jsonstr = read_file()
    extrastr = ''
    for c in args.args:
        extrastr += read_file(c)
    base_string = read_file(args.basefile)
    logging.info('base_string (%d)'%(len(base_string)))
    python_string = replace_outputs(extrastr,args.pattern,base_string)
    newargspattern = 'REPLACE_PATTERN'
    while True:
        newstr = args.jsonstr.replace('%%%s%%'%(newargspattern),'')
        # it means that the coding 
        if newstr != args.jsonstr:
            newargspattern = get_temp_value()
            continue
        newstr = args.jsonstr.replace('%s'%(newargspattern),'')
        if newstr != args.jsonstr:
            newargspattern = get_temp_value()
            continue
        newstr = python_string.replace('%%%s%%'%(newargspattern),'')
        # it means that the 
        if newstr != python_string:
            newargspattern = get_temp_value()
            continue
        newstr = python_string.replace('%s'%(newargspattern),'')
        if newstr != python_string:
            newargspattern = get_temp_value()
            continue
        break
    bash_base_string=get_bash_complete_string(args,newargspattern)
    shpython_string = __get_sh_python(args,python_string)
    bash_complete_string = replace_outputs(shpython_string,'%%%s%%'%(newargspattern),bash_base_string)
    bash_complete_string = bash_complete_string.replace('\r','')
    write_file(bash_complete_string,args.output)
	return

def main():
	commandline='''
	{
		"verbose|v" : "+",
		"output|o" : null,
		"format<format_handler>" : {
			"$": "*"
		}
	}
	'''
	parser = extargsparse.ExtArgsParse(None,priority=[])
	parser.load_command_line_string(commandline)
	parser.parse_command_line(None,parser)
	return

BASH_COMPLETION_COMMAND_STRING='''
%BASH_COMPLETION_COMMAND_STRING%
'''