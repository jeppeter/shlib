#! /bin/bash

CP=/bin/cp
SED=/bin/sed
FIND=/usr/bin/find
XARGS=/usr/bin/xargs
MKDIR=/bin/mkdir
SUDO_PREFIX=/usr/bin/sudo
ECHO=/bin/echo
READLINK=/bin/readlink
GREP=/bin/grep
WC=/usr/bin/wc
PWD=/bin/pwd
TAIL=/usr/bin/tail
MOUNT=/bin/mount
UMOUNT=/bin/umount
AWK=/usr/bin/awk
FILE=/usr/bin/file

SPLITAWK_STR='{curidx=1;curitem="";printout=0;curcon=$0;n=split($0,a);for(i=1;i<=NF;i++){spaces="";idx=index(curcon,a[i]);if(idx>1){spaces=substr(curcon,1,idx-1);curcon=substr(curcon,length(spaces)+1);}curcon=substr(curcon,length(a[i])+1);if(length(a[i])==0){if(length(curitem)>0){curitem=sprintf("%s%s",curitem,spaces);}continue;}if(a[i]==splitchar){if(curidx==searchidx){printf("%s\n",curitem);printout=1;break;}curitem="";curidx+=1;continue;}if(length(curitem)>0){curitem=sprintf("%s%s%s",curitem,spaces,a[i]);}else{curitem=$i;}}if(printout==0&&curidx==searchidx){printf("%s\n",curitem);printout=1;}}'
EQUALAWK_STR='{if($0==searchvar){print$0}}'

INFO_LEVEL=2
DEBUG_LEVEL=3
WARN_LEVEL=1
ERROR_LEVEL=0

function __Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        
        _fmtstr=""
        if [ $verbose -gt $INFO_LEVEL ]
                then
                _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
        fi

        _fmtstr="$_fmtstr$_fmt"
        ${ECHO} -e "$_fmtstr" >&2
}

function Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $DEBUG_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}

function Info()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $INFO_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}

function Warn()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $WARN_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}



function ErrorExit()
{
        local _ec=$1
        local _fmt="$2"
        local _backstack=0
        if [ $# -gt 2 ]
                then
                _backstack=$3
        fi
        local _fmtstr=""

        if [ $verbose -gt $INFO_LEVEL ]
                then
                _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
        fi
        _fmtstr="$_fmtstr$_fmt"
        echo -e "$_fmtstr" >&2
        exitcode=$_ec
        exit $_ec
}




GetSmbMountDir()
{
        if [ -n "$CP_SMB_DIR" ]
                then
                # if we have CP_SMB_DIR
                # so we do this
                ${ECHO} "$CP_SMB_DIR"
                return
        fi
        _mountdir=`${MOUNT} | ${GREP} -e '^//' |  ${AWK} -v splitchar=on -v searchidx=2 "$SPLITAWK_STR"  | ${AWK} -v splitchar=type -v searchidx=1 "$SPLITAWK_STR" | ${TAIL} -1`
        ${ECHO} "$_mountdir"
        return
}


GetGitDir()
{
        _curdir=`${PWD}`
        while [ True ]
        do
                if [ -z "$_curdir" ] || [ "$_curdir" = "/" ]
                        then
                        ${ECHO} "/"
                        return
                fi
                if [ -d "$_curdir/.git" ]
                        then
                        ${ECHO} "$_curdir"
                        return
                fi
                _curdir=`dirname $_curdir`
        done
}

IsSub()
{
        _base1="$1"
        _cur1="$2"
        _base=`${READLINK} -f "$_base1"`
        _cur=`${READLINK} -f "$_cur1"`
        _base="$_base/"
        _cur="$_cur/"
        _issub=`${ECHO} -n "$_cur" | ${GREP} -E "^$_base" | ${WC} -c`
        if [ $_issub -gt 0 ]
                then
                ${ECHO} "1"
                return
        fi
        ${ECHO} "0"
        return
}

GetSubDir()
{
        _base1="$1"
        _cur1="$2"
        _base=`${READLINK} -f "$_base1"`
        _cur=`${READLINK} -f "$_cur1"`
        _base="$_base/"
        _cur="$_cur/"
        _subdir=`${ECHO} -n "$_cur" | ${SED} 's|^'"$_base"'||' | ${SED} 's|/$||'`
        ${ECHO} "$_subdir"
        return
}


