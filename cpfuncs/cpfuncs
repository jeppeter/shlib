#! /bin/bash

CP=`which cp`
SED=`which sed`
FIND=`which find`
XARGS=`which xargs`
MKDIR=`which mkdir`
SUDO_PREFIX=`which sudo`
ECHO=`which echo`
GREP=`which grep`
WC=`which wc`
PWD=`which pwd`
TAIL=`which tail`
MOUNT=`which mount`
UMOUNT=`which umount`
FILE=`which file`
PERL=`which perl`

read -r -d '' PERL_READLINK_STR<<EOFMM
use Cwd "abs_path";
print abs_path(shift);
EOFMM

read -r -d '' PERL_MOUNTCHECK_STR<<EOFMM
#! /usr/bin/env perl -w

use strict;
use Getopt::Long;

my (\$prog)=\$0;
my (\$version)="0.0.1";
my (\$verbose)=0;

sub Debug(\$)
{
	my (\$fmt)=@_;
	my (\$p,\$f,\$l)=caller;
	my (\$fmtstr)="";
	if (\$verbose >= 1) {
		if (\$verbose >=3){
			\$fmtstr="[\$f:\$l] ";
		}
		\$fmtstr .= "\$fmt";
		print STDERR "\$fmtstr\\n";
	}
	return;
}

sub Usage
{
	my (\$ec) = shift @_;
	my (\$fmt) = "";
	my (\$fp) = \\*STDERR;

	if (\$ec == 0) {
		\$fp = \\*STDOUT;
	}

	if (scalar(@_) > 0) {
		\$fmt = shift @_;
	}

	if (length(\$fmt) > 0) {
		print \$fp "\$fmt\\n";
	}

	print \$fp "\$prog [OPTIONS] subcommand [FILTERS]...\\n";
	print \$fp "\\t-h|--help                to display this help information\\n";
	print \$fp "\\t-v|--verbose             to add verbose\\n";
	print \$fp "\\t-k|--version             to print version\\n";
	print \$fp "\\t-p|--prog progname       to specify progname\\n";
	print \$fp "subcommand:\\n";
	print \$fp "\\t[mntpnt]   [devices]...  to get mount point ,if null display all the mount points\\n";
	print \$fp "\\t[sharemnt]               to get mount point of shared on\\n";

	exit(\$ec);
}

sub print_version()
{
	print STDOUT "\$prog version \$version\\n";
	exit(0);
}

sub get_dev(\$)
{
	my (\$l) = @_;
	my (\$ml) = \$l;
	my (\$retl) = "";
	my (\$tmpretl);
	my \$cont=1;
	while (\$cont) {
		\$cont = 0;
		if (\$ml =~ m/(.*?)\\s+on\\s+(.*?)/o) {
			\$retl .= \$1;
			\$tmpretl = \$1;
			if (\$retl =~ m/\\\\/o) {
				\$tmpretl =~ s/\\\\/\\\\\\\\/g;
				\$ml =~ s/^\$tmpretl //;
				Debug("ml [\$ml] retl[\$retl] tmpretl [\$tmpretl]");
				\$retl .= " ";
				if (\$ml =~ m/^on/o) {
					\$retl .= "on ";
					\$ml =~ s/^on //;
					\$cont = 1;
				}
			}
		}
	}
	if (length(\$retl) == 0) {
		\$retl = \$l;
	}
	return \$retl;
}


sub get_mac_mntpnt(\$)
{
	my (\$l) = @_;
	my (\$ml) = \$l;
	my (\$cont);
	my \$retl="";
	my (\$tmpmnt);
	\$cont = 1;
	while (\$cont) {
		\$cont = 0;
		if (\$ml =~ m/(.*?)\\((.*?)/o) {
			\$retl .= \$1;
			\$tmpmnt = \$1;

			if (\$tmpmnt =~ m/\\\\\$/o) {
				\$tmpmnt =~ s/\\\\/\\\\\\\\/g;
				\$ml =~ s/^\$tmpmnt\\(//;
				\$retl .= "(";
				\$cont = 1;
			} elsif (\$tmpmnt =~ m/ \$/o) {
				\$retl =~ s/ \$//;
			}
		}
	}
	if (length(\$retl) == 0) {
		\$retl = \$l;
	}
	return \$retl;
}

sub get_linux_mntpnt(\$)
{
	my (\$l) = @_;
	my (\$ml) = \$l;
	my (\$cont);
	my \$retl="";
	my (\$tmpmnt);
	\$cont = 1;
	while (\$cont) {
		\$cont = 0;
		if (\$ml =~ m/(.*?) type\\s+(.*?)/o) {
			\$retl .= \$1;
			\$tmpmnt = \$1;
			Debug("retl [\$retl]");
			if (\$tmpmnt =~ m/\\\\\$/o) {
				\$tmpmnt =~ s/\\\\/\\\\\\\\/g;
				\$ml =~ s/^\$tmpmnt type//;
				\$retl .= " type";
				\$cont = 1;
			} elsif (\$tmpmnt =~ m/ \$/o) {
				\$retl =~ s/ \$//;
			}
		}
	}
	if (length(\$retl) == 0) {
		\$retl = \$l;
	}
	return \$retl;
}


sub mntpnt_handler
{
	my (@dirs)=@_;
	my (\$osname)=\`uname -s\`;
	my (@mntpnt)=();
	my (\$mntpart);
	my (\$partmnt);
	my (\$getdev,\$tmpdev);
	chomp(\$osname);
	\$osname = lc \$osname;

	while(<STDIN>){
		my \$l=\$_;
		chomp(\$l);
		\$getdev = get_dev(\$l);
		foreach (@dirs) {
			my (\$p) = \$_;
			if (\$osname eq "darwin"){
				if (\$p =~ m/^\\/\\//o) {
					\$partmnt = \$p;
					\$partmnt =~ s/^\\/\\///;
					Debug("partmnt [\$partmnt]");
					if (\$getdev =~ m/\\/\\/(.*@)?\$partmnt/) {
						\$mntpart = \$l;
						\$getdev =~ s/\\\\/\\\\\\\\/g;
						\$mntpart =~ s/^\$getdev//;
						Debug("mntpart [\$mntpart]");
						\$mntpart =~ s/^ on //;
						Debug("mntpart [\$mntpart]");
						push(@mntpnt,get_mac_mntpnt(\$mntpart));						
					}
				} else {
					if (\$getdev eq \$p) {
						\$mntpart = \$l;
						\$p =~ s/\\\\/\\\\\\\\/g;
						\$mntpart =~ s/^\$p//;
						\$mntpart =~ s/^ on //;
						push(@mntpnt,get_mac_mntpnt(\$mntpart));
					}
				}
			} elsif (\$osname eq "linux") {
				if (\$getdev eq \$p) { 
					\$mntpart = \$l;
					\$getdev =~ s/\\\\/\\\\\\\\/g;
					\$mntpart =~ s/^\$getdev//;
					\$mntpart =~ s/^ on //;
					push(@mntpnt,get_linux_mntpnt(\$mntpart));
				}
			} else {
				die "[\$osname] not supported";
			}
		}
	}
	return @mntpnt;
}

sub sharemnt_handler
{
	my (\$osname)=\`uname -s\`;
	my (@mntpnt)=();
	my (\$partmnt);
	my (\$mntpart);
	my (\$getdev,\$tmpdev);
	chomp(\$osname);
	\$osname = lc \$osname;

	while(<STDIN>){
		my \$l=\$_;
		chomp(\$l);
		\$getdev = get_dev(\$l);
		if (\$getdev =~ m/^\\/\\//) {
			if (\$osname eq "darwin"){
				\$mntpart = \$l;
				\$getdev =~ s/\\\\/\\\\\\\\/g;
				\$mntpart =~ s/^\$getdev//;
				\$mntpart =~ s/^ on //;
				push(@mntpnt,get_mac_mntpnt(\$mntpart));						
			} elsif (\$osname eq "linux") {
				\$mntpart = \$l;
				\$getdev =~ s/\\\\/\\\\\\\\/g;
				\$mntpart =~ s/^\$getdev//;
				\$mntpart =~ s/^ on //;
				push(@mntpnt,get_linux_mntpnt(\$mntpart));
			} else {
				die "[\$osname] not supported";
			}
		}
	}
	return @mntpnt;	
}

my (\$versionmode)=0;
my (\$help)=0;
GetOptions("v|verbose" => sub {
		\$verbose ++;
	},
	"K|version" => sub {
			\$versionmode ++;
		},
	"h|help" => sub {
		\$help ++;
	},
	"p|prog=s" => \\\$prog);

if (\$help > 0) {
	Usage(0,"");
} elsif (\$versionmode > 0) {
	print_version();
}

my \$subcommand;
if (scalar(@ARGV) == 0) {
	print STDERR "\$prog no subcommand not set\\n";
	exit(3);
}
\$subcommand = shift @ARGV;
if (\$subcommand eq "mntpnt") {
	my @mntpnt;
	@mntpnt=mntpnt_handler(@ARGV);
	foreach(@mntpnt) {
		print STDOUT "\$_\\n";
	}
} elsif (\$subcommand eq "sharemnt") {
	my @mntpnt;
	@mntpnt =sharemnt_handler();
	foreach(@mntpnt) {
		print STDOUT "\$_\\n";
	}	
} else {
	print STDERR "[\$subcommand] not supported\\n";
	exit(4);
}
EOFMM

INFO_LEVEL=2
DEBUG_LEVEL=3
WARN_LEVEL=1
ERROR_LEVEL=0

function __Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        
        _fmtstr=""
        if [ $verbose -gt $INFO_LEVEL ]
                then
                _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
        fi

        _fmtstr="$_fmtstr$_fmt"
        ${ECHO} -e "$_fmtstr" >&2
}

function Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $DEBUG_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}

function Info()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $INFO_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}

function Warn()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $WARN_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}



function ErrorExit()
{
        local _ec=$1
        local _fmt="$2"
        local _backstack=0
        if [ $# -gt 2 ]
                then
                _backstack=$3
        fi
        local _fmtstr=""

        if [ $verbose -gt $INFO_LEVEL ]
                then
                _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
        fi
        _fmtstr="$_fmtstr$_fmt"
        echo -e "$_fmtstr" >&2
        exitcode=$_ec
        exit $_ec
}




GetSmbMountDir()
{
        if [ -n "$CP_SMB_DIR" ]
                then
                # if we have CP_SMB_DIR
                # so we do this
                ${ECHO} "$CP_SMB_DIR"
                return
        fi
        _mountdir=`${MOUNT} | ${PERL} -E "$PERL_MOUNTCHECK_STR" sharemnt | tail -1`
        ${ECHO} "$_mountdir"
        return
}


GetGitDir()
{
        _curdir=`${PWD}`
        while [ True ]
        do
                if [ -z "$_curdir" ] || [ "$_curdir" = "/" ]
                        then
                        ${ECHO} "/"
                        return
                fi
                if [ -d "$_curdir/.git" ]
                        then
                        ${ECHO} "$_curdir"
                        return
                fi
                _curdir=`dirname $_curdir`
        done
}

IsSub()
{
        local _base1="$1"
        local _cur1="$2"
        local _base=`${PERL} -e "$PERL_READLINK_STR" "$_base1"`
        local _cur=`${PERL} -e "$PERL_READLINK_STR" "$_cur1"`
        _base="$_base/"
        _cur="$_cur/"
        _issub=`${ECHO} -n "$_cur" | ${GREP} -E "^$_base" | ${WC} -c`
        if [ $_issub -gt 0 ]
                then
                ${ECHO} "1"
                return
        fi
        ${ECHO} "0"
        return
}

GetSubDir()
{
        _base1="$1"
        _cur1="$2"
        _base=`${PERL} -e "$PERL_READLINK_STR" "$_base1"`
        _cur=`${PERL} -e "$PERL_READLINK_STR" "$_cur1"`
        _base="$_base/"
        _cur="$_cur/"
        _subdir=`${ECHO} -n "$_cur" | ${SED} 's|^'"$_base"'||' | ${SED} 's|/$||'`
        ${ECHO} "$_subdir"
        return
}


