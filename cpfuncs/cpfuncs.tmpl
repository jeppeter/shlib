#! /bin/bash

CP=`which cp`
SED=`which sed`
FIND=`which find`
XARGS=`which xargs`
MKDIR=`which mkdir`
SUDO_PREFIX=`which sudo 2>/dev/null`
ECHO=`which echo`
GREP=`which grep`
WC=`which wc`
PWD=`which pwd`
TAIL=`which tail`
MOUNT=`which mount`
UMOUNT=`which umount`
FILE=`which file`
PERL=`which perl`
AWK=`which gawk`
PYTHON=`which python`

read -r -d '' PERL_READLINK_STR<<EOFMM
use Cwd "abs_path";
print abs_path(shift);
EOFMM

read -r -d '' PERL_SUBPATH_STR<<EOFMM
%PERL_SUBPATH_STR%
EOFMM


read -r -d '' PERL_MOUNTCHECK_STR<<EOFMM
%PERL_MOUNTCHECK_STR%
EOFMM

read -r -d '' PYTHON_SHCP_STR<<EOFMM
%PYTHON_SHCP_STR%
EOFMM

%DEBUGSH_CODE%


GetSmbMountDir()
{
        if [ -n "$CP_SMB_DIR" ]
                then
                # if we have CP_SMB_DIR
                # so we do this
                ${ECHO} "$CP_SMB_DIR"
                return
        fi
        _mountdir=`${MOUNT} | ${PERL} -e "$PERL_MOUNTCHECK_STR" sharemnt | tail -1`
        ${ECHO} "$_mountdir"
        return
}


GetGitDir()
{
        _curdir=`${PWD}`
        while [ True ]
        do
                if [ -z "$_curdir" ] || [ "$_curdir" = "/" ]
                        then
                        ${ECHO} "/"
                        return
                fi
                if [ -d "$_curdir/.git" ]
                        then
                        ${ECHO} "$_curdir"
                        return
                fi
                _curdir=`dirname $_curdir`
        done
}

IsSub()
{
        local _base1="$1"
        local _cur1="$2"
        local _base=`${PERL} -e "$PERL_READLINK_STR" "$_base1"`
        local _cur=`${PERL} -e "$PERL_READLINK_STR" "$_cur1"`
        _base="$_base/"
        _cur="$_cur/"
        _issub=`${ECHO} -n "$_cur" | ${GREP} -E "^$_base" | ${WC} -c`
        if [ $_issub -gt 0 ]
                then
                ${ECHO} "1"
                return
        fi
        ${ECHO} "0"
        return
}

GetSubDir()
{
        local _base1="$1"
        local _cur1="$2"
        local _base=`${PERL} -e "$PERL_READLINK_STR" "$_base1"`
        local _cur=`${PERL} -e "$PERL_READLINK_STR" "$_cur1"`
        _base="$_base"
        _cur="$_cur"
        _subdir=`${ECHO} "$_cur" | ${PERL} -e "$PERL_SUBPATH_STR" "$_base"`
        ${ECHO} "$_subdir"
        return
}


CopyFrom()
{
        local _i
        local _todir="$1"
        local _frombase="$2"
        local _basedir="$3"
        local _oldverbose="$EXTARGS_VERBOSE"
        local _res
        export EXTARGS_VERBOSE="$verbose"
        Debug "EXTARGS_VERBOSE=[$EXTARGS_VERBOSE]"
        Debug "from [$_frombase/$_todir] to [$_basedir/$_todir] [$_basedir]"

        ${PYTHON} -c "$PYTHON_SHCP_STR" "$_frombase/$_todir" "$_basedir/$_todir" "$_frombase"
        _res=$?

        if [ -z "$_oldverbose" ]
                then
                unset EXTARGS_VERBOSE
        else
                export EXTARGS_VERBOSE="$_oldverbose"
        fi

        if [ $_res -ne 0 ]
                then
                ErrorExit $_res "can not copy [$_frombase/$_todir] => [$_basedir/$_todir]"
        fi

        if [ -d "$_frombase/$_todir" ]
        then
                for _i in $(${FIND} "$_frombase/$_todir" -type f | ${XARGS}  ${FILE}  | ${GREP} -e 'ASCII text' | ${AWK} -F: '{print $1}' | ${SED} "s,^$_frombase,$_basedir,")
                do
                    Debug "dos2unix [$_i]"
                    ${PERL} -e "$PERL_DOS2UNIX_STR" "$_i"
                done
        else
                for _i in $(${FIND} "$_basedir/$_todir" -type f | ${XARGS}  ${FILE}  | ${GREP} -e 'ASCII text' | ${AWK} -F: '{print $1}')
                do
                    Debug "dos2unix [$_i]"
                    ${PERL} -e "$PERL_DOS2UNIX_STR" "$_i"
                done
        fi
}

CopyTo()
{
        local _todir=$1
        local _frombase=$2
        local _basedir=$3
        local _oldverbose="$EXTARGS_VERBOSE"
        local _res
        export EXTARGS_VERBOSE="$verbose"
        Debug "EXTARGS_VERBOSE [$EXTARGS_VERBOSE]"

        Debug "from $_basedir/$_frombase to $_todir/$_frombase [$_basedir]"
        ${SUDO_PREFIX} ${PYTHON} -c "$PYTHON_SHCP_STR" "$_basedir/$_frombase" "$_todir/$_frombase" "$_basedir"
        _res=$?

        if [ -z "$_oldverbose" ]
                then
                unset EXTARGS_VERBOSE
        else
                export EXTARGS_VERBOSE="$_oldverbose"
        fi

        if [ $_res -ne 0 ]
                then
                ErrorExit $_res "can not copy [$_basedir/$_frombase] => [$_todir/$_frombase]"
        fi
        return
}
