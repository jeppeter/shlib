#! /bin/bash

CP=`which cp`
SED=`which sed`
FIND=`which find`
XARGS=`which xargs`
MKDIR=`which mkdir`
SUDO_PREFIX=`which sudo`
ECHO=`which echo`
GREP=`which grep`
WC=`which wc`
PWD=`which pwd`
TAIL=`which tail`
MOUNT=`which mount`
UMOUNT=`which umount`
FILE=`which file`
PERL=`which perl`
AWK=`which gawk`

read -r -d '' PERL_READLINK_STR<<EOFMM
use Cwd "abs_path";
print abs_path(shift);
EOFMM

read -r -d '' PERL_MOUNTCHECK_STR<<EOFMM
%PERL_MOUNTCHECK_STR%
EOFMM

INFO_LEVEL=2
DEBUG_LEVEL=3
WARN_LEVEL=1
ERROR_LEVEL=0

function __Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        
        _fmtstr=""
        if [ $verbose -gt $INFO_LEVEL ]
                then
                _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
        fi

        _fmtstr="$_fmtstr$_fmt"
        ${ECHO} -e "$_fmtstr" >&2
}

function Debug()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $DEBUG_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}

function Info()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $INFO_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}

function Warn()
{
        local _fmt=$1
        shift
        local _backstack=0
        if [ $# -gt 0 ]
                then
                _backstack=$1
        fi
        _backstack=`expr $_backstack \+ 1`
        
        if [ $verbose -ge $WARN_LEVEL ]
                then
                __Debug "$_fmt" "$_backstack"
        fi
        return
}



function ErrorExit()
{
        local _ec=$1
        local _fmt="$2"
        local _backstack=0
        if [ $# -gt 2 ]
                then
                _backstack=$3
        fi
        local _fmtstr=""

        if [ $verbose -gt $INFO_LEVEL ]
                then
                _fmtstr="${BASH_SOURCE[$_backstack]}:${BASH_LINENO[$_backstack]} "
        fi
        _fmtstr="$_fmtstr$_fmt"
        echo -e "$_fmtstr" >&2
        exitcode=$_ec
        exit $_ec
}




GetSmbMountDir()
{
        if [ -n "$CP_SMB_DIR" ]
                then
                # if we have CP_SMB_DIR
                # so we do this
                ${ECHO} "$CP_SMB_DIR"
                return
        fi
        _mountdir=`${MOUNT} | ${PERL} -e "$PERL_MOUNTCHECK_STR" sharemnt | tail -1`
        ${ECHO} "$_mountdir"
        return
}


GetGitDir()
{
        _curdir=`${PWD}`
        while [ True ]
        do
                if [ -z "$_curdir" ] || [ "$_curdir" = "/" ]
                        then
                        ${ECHO} "/"
                        return
                fi
                if [ -d "$_curdir/.git" ]
                        then
                        ${ECHO} "$_curdir"
                        return
                fi
                _curdir=`dirname $_curdir`
        done
}

IsSub()
{
        local _base1="$1"
        local _cur1="$2"
        local _base=`${PERL} -e "$PERL_READLINK_STR" "$_base1"`
        local _cur=`${PERL} -e "$PERL_READLINK_STR" "$_cur1"`
        _base="$_base/"
        _cur="$_cur/"
        _issub=`${ECHO} -n "$_cur" | ${GREP} -E "^$_base" | ${WC} -c`
        if [ $_issub -gt 0 ]
                then
                ${ECHO} "1"
                return
        fi
        ${ECHO} "0"
        return
}

GetSubDir()
{
        _base1="$1"
        _cur1="$2"
        _base=`${PERL} -e "$PERL_READLINK_STR" "$_base1"`
        _cur=`${PERL} -e "$PERL_READLINK_STR" "$_cur1"`
        _base="$_base/"
        _cur="$_cur/"
        _subdir=`${ECHO} -n "$_cur" | ${SED} 's|^'"$_base"'||' | ${SED} 's|/$||'`
        ${ECHO} "$_subdir"
        return
}


