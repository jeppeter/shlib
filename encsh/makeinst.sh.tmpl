#! /bin/bash

%DEFINESH_CODE%

%DEBUGSH_CODE%

%DEPENDSH_CODE%

read -r -d '' PYTHON_MD5_STR<<EOFMM
%PYTHON_MD5_STR%
EOFMM

read -r -d '' PERL_READLINK_STR_2<<EOFMM
use Cwd "abs_path";
print abs_path(shift);
EOFMM


res=$(check_depend "extargsparse4sh")
if [ $res -eq 0 ]
	then
	cat >&2 <<EOF
	can not found extargsparse4sh in [$PATH]
	please download source code from https://github.com/jeppeter/extargsparse4sh
	and make to copy to the path
EOF
	exit 4
fi

source extargsparse4sh

verbose=

run_cmd()
{
	_cmd=$1
	if [ -z "$_cmd" ]
	then
		/bin/echo "no cmd specify" >&2
		exit 2
	fi

	if [ $verbose -lt 3 ] ; then
	/bin/echo -e -n "\e[1;37mrunning ($_cmd)\e[0m" >&2
	fi
	if [ $verbose -lt 3 ]; then
		eval "$_cmd" >/dev/null
	else
		eval "$_cmd"
	fi
	_res=$?
	
	if [  $_res -ne 0 ]
	then
		if [ $verbose -lt 3 ] ; then
			/bin/echo -e "\e[31m[FAILED]\e[0m" >&2
		fi
		exit 3
	fi
	if [ $verbose -lt 3 ] ; then
		/bin/echo -e "\e[32m[SUCCESS]\e[0m" >&2
	fi
}

make_bios()
{
	_topdir=$1
	_instdir=$2
	_privdir=$3
	_kernver=$4
	_conf=$5


	run_cmd "rm -rf $_instdir"
	run_cmd "mkdir -p $_instdir"
	if [ ! -e "$_privdir" ]
		then
		run_cmd "mkdir -p \"$_privdir\""
	fi
	run_cmd "cp $_topdir/src/mbr/mbr.bin $_instdir/"
	run_cmd "cp $_topdir/src/stage10/stage10.bin $_instdir/"
	run_cmd "cp $_topdir/src/stage15/stage15.bin $_instdir/"
	run_cmd "cp $_topdir/src/main/main.lz $_instdir/"
	run_cmd "cp $_topdir/src/install/encutil $_instdir/"
	run_cmd "cp $_topdir/src/install/tstefi $_privdir/"

	run_cmd "$_topdir/src/install/encutil mkbios -V $_topdir/src/package/vmlinuz-${_kernver} -r $_topdir/src/package/initrd.img-${_kernver}  $_instdir/encboot.img"
	run_cmd "$_topdir/src/install/tstefi writeconf -o $_instdir/encboot.conf '${_conf}'"
	if [ -n "$MAKOB_FILE" ] && [ -f "$MAKOB_FILE" ]
		then
		_makob_base=`basename $MAKOB_FILE`
		run_cmd "cp $MAKOB_FILE $_privdir/$_makob_base"
	fi


}

make_efi()
{
	_topdir=$1
	_instdir=$2
	_privdir=$3
	_kernver=$4
	_conf=$5

	run_cmd "rm -rf $_instdir"
	run_cmd "mkdir -p $_instdir"
	if [ ! -e "$_privdir" ]
		then
		run_cmd "mkdir -p \"$_privdir\""
	fi
	run_cmd "$_topdir/src/install/encutil mkefi -V $_topdir/src/package/vmlinuz-${_kernver} -r $_topdir/src/package/initrd.img-${_kernver} --conffile \"$_instdir/bingte.conf\" \"$_instdir/bingte.img\" \"${_conf}\" "
	run_cmd "cp $_topdir/src/efi/bingte.efi $_instdir/bingte.efi"
	run_cmd "cp $_topdir/src/install/encutil $_instdir/encutil"
	run_cmd "cp $_topdir/src/install/tstefi $_privdir/"
	if [ -n "$MAKOB_FILE" ] && [ -f "$MAKOB_FILE" ]
		then
		_makob_base=`basename $MAKOB_FILE`
		run_cmd "cp $MAKOB_FILE $_privdir/$_makob_base"
	fi
}

make_compile_all()
{
	_topdir=$1
	_kernver=$2

	run_cmd "make -C '${_topdir}' KERNEL_VERSION=${_kernver} all"
}

make_compile_efi()
{
	_topdir=$1
	_kernver=$2

	run_cmd "make -C '${_topdir}' KERNEL_VERSION=${_kernver} efi"
}

make_compile_bios()
{
	_topdir=$1
	_kernver=$2

	run_cmd "make -C '${_topdir}' KERNEL_VERSION=${_kernver} bios"
}

make_compile_clean()
{
	_topdir=$1
	_kernver=$2

	run_cmd "make -C '${_topdir}' KERNEL_VERSION=${_kernver} clean"
}


_curversion=`uname -r`
script_file=`which $0`
if [ -z "$_curfile" ]
	then
    script_file=`perl -e "$PERL_READLINK_STR_2" $0`
fi

_curdir=`dirname $script_file`
base_script=`basename $script_file`

read -r -d '' OPTIONS<<EOFMM
	{
		"verbose|v" : "+",
		"kernelversion|V": "$_curversion",
		"topdir|D##specified the top default ($_curdir)##" : "$_curdir",
		"config|C##specified the configuration for compiling default (ro quiet) ##" : "ro quiet",
		"efidir" : "$_curdir/efidir",
		"biosdir" : "$_curdir/biosdir",
		"privdir"  : "$_curdir/privdir",
		"obfuscated|O" : false,
		"reserve|R" : false,
		"noline" : 0,
		"obfile|F" : false,
		"all<subcommand>##prepare efi and bios all install package##" : {
			"\$" : 0
		},
		"efi<subcommand>##prepare efi only install package##" : {
			"\$" : 0
		},
		"bios<subcommand>##prepare bios only install package##" : {
			"\$" : 0
		},
		"compile<subcommand>##run compile all##" : {
			"\$" : 0
		},
		"clean<subcommand>##clean all the install packages##" : {
			"\$" : 0
		}
	}
EOFMM


parse_command_line "$OPTIONS" "$@"

local_tempdir=""
obfile_tempdir=""

function _remove_dir()
{
	local _dir="$1"
	local _descript="$2"
	if [ -n "$_dir" ]
		then
		if [ $reserve -eq 0 ]
			then
			rm -rf "$_dir"
		else
			Debug "$_descript [$_dir]"
		fi
	fi
}

function call_next_level_run()
{
	local _tempdir="$1"
	local _specadd="$2"
	local _cmd_to_run
	local _verbosemode
	local _i
	local _num_subnargs
	local _idx
	local _reserve
	_verbosemode=""
	if [ $verbose -gt 0 ]
		then
		_i=0
		_verbosemode="-"
		while [ $_i -lt $verbose ]
		do
			_verbosemode=`printf "%sv" $_verbosemode`
			_i=`expr $_i \+ 1`
		done
	fi
	_reserve=""
	if [ $reserve -ne 0 ]
		then
		_reserve="--reserve"
	fi

	_cmd_to_run="\"$_tempdir/$base_script\" --privdir \"$privdir\" --efidir \"$efidir\" --biosdir \"$biosdir\" $_verbosemode -C \"$config\"  -V $kernelversion $_reserve $_specadd \"$subcommand\""
	_num_subnargs=${#subnargs[*]}
	if [ $_num_subnargs -gt 0 ]
		then
		_idx=0
		while [ $_idx -lt $_num_subnargs ]
		do
			_cmd_to_run="$_cmd_to_run ${subnargs[$_idx]}"
			_idx=`$_idx \+ 1`
		done
	fi
	run_cmd "$_cmd_to_run"
}

function trap_exit() {
	_remove_dir "$local_tempdir" "LOCAL_TEMPDIR"
	_remove_dir "$obfile_tempdir" "OBFILE_TEMPDIR"
}

trap trap_exit EXIT

if [ ! -e "$_curdir/py-obcode" ]
	then
	run_cmd "make -C \"$_curdir\" -f \"$_curdir/init.mak\" all"
fi


if [ $obfile -ne 0 ]
	then
	# we should make obfile so do this
	obfile_tempdir=`mktemp -d`
	Debug "OBFILE_TEMPDIR [$obfile_tempdir]"
	cp -r "$_curdir/." "$obfile_tempdir/"
	# now we should 
	unset  O
	unset  MAKOB_FILE
	run_cmd "rm -f $_curdir/makob.json"
	export O=1
	export MAKOB_FILE="$obfile_tempdir/makob.json"
	# this would give the file
	_c=""
	if [ $obfuscated -gt 0 ]
		then
		_c="--obfuscated"
	fi
	call_next_level_run "$obfile_tempdir" "$_c"
	exit 0
fi

Debug "obfuscated [$obfuscated]"


if [ $obfuscated -ne 0 ]
	then

	# this is the obfuscated ,so we should give the code
	if [ "$subcommand" = "clean" ]
		then
		# nothing to do
		exit 0
	fi
	local_tempdir=`mktemp -d`
	run_cmd "sync"
	Debug "local_tempdir [$local_tempdir]"
	_nolinemode=""
	if [ $noline -gt 0 ]
		then
		_nolinemode="--cob-noline 1"
	fi
	_verbosemode=""
	if [ $verbose -gt 0 ]
		then
		_i=0
		_verbosemode="-"
		while [ $_i -lt $verbose ]
		do
			_verbosemode=`printf "%sv" $_verbosemode`
			_i=`expr $_i \+ 1`
		done
	fi
	run_cmd "make -C \"$topdir\" \"$topdir/py-obcode/obcode.py\""

	if [ -n "$O" ] && [ $O -gt 0 ] && [ -n "$MAKOB_FILE" ]
		then
		run_cmd "python \"$_curdir/py-obcode/obcode.py\" obtrans --obtrans-srcdir \"_curdir\" --obtrans-dstdir \"$local_tempdir\" $MAKOB_FILE"
	fi

	Debug "local_tempdir [$local_tempdir] topdir [$topdir]"
	run_cmd "python \"$topdir/py-obcode/obcode.py\" cob $_nolinemode $_verbosemode \"$topdir\" \"$local_tempdir\""



	Debug "obfuscated [$obfuscated]"	
	call_next_level_run "$local_tempdir"
	exit 0
fi


if [ "$subcommand" = "all" ]
	then
	make_compile_all "$topdir" "$kernelversion"
	make_bios "$topdir" "$biosdir" "$privdir" "$kernelversion" "$config" 
	make_efi  "$topdir" "$efidir" "$privdir" "$kernelversion" "$config"
elif [ "$subcommand" = "efi" ]
	then
	make_compile_efi "$topdir" "$kernelversion"
	make_efi  "$topdir" "$efidir" "$privdir" "$kernelversion" "$config"
elif [ "$subcommand" = "bios" ]
	then
	make_compile_bios "$topdir" "$kernelversion"
	make_bios "$topdir" "$biosdir" "$privdir" "$kernelversion" "$config"
elif [ "$subcommand" = "compile" ]
	then
	make_compile_all "$topdir" "$kernelversion"
elif [ "$subcommand" = "clean" ]
	then
	make_compile_clean "$topdir" "$kernelversion"
	run_cmd "rm -rf \"$efidir\""
	run_cmd "rm -rf \"$biosdir\""
	run_cmd "rm -rf \"$privdir\""
else
	echo "not supported command [$subcommand]" >&2
	exit 4
fi

