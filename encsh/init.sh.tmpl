#! /bin/bash

verbose=0
bindir="$HOME/bin"


%DEFINESH_CODE%

%DEBUGSH_CODE%

%RUNSH_CODE%

%PKGSH_CODE%

_scriptfile=`readlink -f $0`
if [ -z "$_scriptfile" ]
	then
	_scriptfile=`which $0`
fi
_scriptdir=`dirname $_scriptfile`

declare -a DEFAULT_DPKG_FILE
declare -a DEFAULT_PIP_FILE


DEFAULT_DPKG_FILE[0]="$_scriptdir/dpkg.txt"
DEFAULT_DPKG_FILE[1]="$_scriptdir/src/package/cppkgs.txt"

DEFAULT_PIP_FILE[0]="$_scriptdir/pip.txt"


TestSudo


Usage()
{
	_ec=$1
	_fmt=$2
	_echoout=/dev/stderr
	if [ $_ec -eq 0 ]
	then
		_echoout=/dev/stdout
	fi

	if [ -n "$_fmt" ]
		then
		echo -e "$_fmt" >$_echoout
	fi

	echo -e "init [OPTIONS] [cmds...]" >$_echoout
	echo -e "\t--help|-h                          to display this help information" >$_echoout
	echo -e "\t--verbose|-v                       to make verbose mode" >$_echoout
	echo -e "\t--bindir|-d      bindir            to specify the bin dir to install for self use" >$_echoout
	echo -e "\t--dpkg|-D        file              to add the dpkg install files default[${DEFAULT_DPKG_FILE[@]}]" >$_echoout
	echo -e "\t--pip|-p         file              to add pip file default [${DEFAULT_PIP_FILE[@]}]" >$_echoout
	echo -e "" >$_echoout
	echo -e "cmds ... will run after all installed" >$_echoout
	exit $_ec
}

declare -a pip_install_files
declare -a dpkg_install_files

CheckOS

while [ $# -gt 0 ]
do
	_curarg=$1
	if [ "$_curarg" = "--help" ] || [ "$_curarg" = "-h" ]
		then
		Usage 0 ""
	elif [ "$_curarg" = "--verbose" ] || [ "$_curarg" = "-v" ]
		then
		verbose=`expr $verbose + 1`
	elif [ "$_curarg" = "--bindir" ] || [ "$_curarg" = "-d" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		bindir=$2
		shift
	elif [ "$_curarg" = "--dpkg" ] || [ "$_curarg" = "-D" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		_num=${#dpkg_install_files[@]}
		dpkg_install_files[$_num]=$2
		shift
	elif [ "$_curarg" = "--pip" ] || [ "$_curarg" = "-p" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		_num=${#pip_install_files[@]}
		pip_install_files[$_num]=$2
		shift		
 	elif [ "$_curarg" = "--" ]
 		then
 		shift
 		break
 	else
		break
	fi
	shift
done

_num=${#dpkg_install_files[@]}
if [  $_num -eq 0 ]
	then
	dpkg_install_files=$DEFAULT_DPKG_FILE
fi

_num=${#pip_install_files[@]}
if [ $_num -eq 0 ]
	then
	pip_install_files=$DEFAULT_PIP_FILE
fi

for _c in ${dpkg_install_files[@]}
do
	for _l in $(cat $_c)
	do
		CheckOrInstallMustSucc "$_l"
	done
done

for _c in ${pip_install_files[@]}
do
	for _l in $(cat $_c)
	do
		InstallUpgradePIPPackage "$_l"
	done
done


_isok=`which extargsparse4sh`
if [ -z "$_isok" ]
	then
	CheckOrCloneDir https://github.com/jeppeter/extargsparse4sh.git

	if [ -n "$bindir" ] && [ ! -d "$bindir" ]
		then
		mkdir -p "$bindir"
	fi

	export PATH=$PATH:$bindir
	(pushd ${PWD} && cd extargsparse4sh && make && popd) || ErrorExit 4 "can not make extargsparse4sh"
	CopyOnDstDir extargsparse4sh/extargsparse4sh
fi

_isok=`echo $PATH | awk -F: '{for(i=1;i<NF;i++){printf("%s\n",$i);}}' | grep -e "^$bindir\$"`
if [ -z "$_isok" ]
	then
	cat <<EOFMM>> $HOME/.bashrc
	export PATH=\$PATH:$bindir
EOFMM
fi

if [ $# -gt 0 ]
	then
	$@
	if [ $? -ne 0 ]
		then
		ErrorExit 5 "run [$@] error[$?]"
	fi
fi