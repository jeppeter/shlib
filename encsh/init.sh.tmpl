#! /bin/bash

verbose=0
bindir="$HOME/bin"


%DEFINESH_CODE%

%DEBUGSH_CODE%

_scriptfile=`readlink -f $0`
if [ -z "$_scriptfile" ]
	then
	_scriptfile=`which $0`
fi
_scriptdir=`dirname $_scriptfile`

declare -a DEFAULT_DPKG_FILE
declare -a DEFAULT_PIP_FILE


DEFAULT_DPKG_FILE[0]="$_scriptdir/dpkg.txt"
DEFAULT_DPKG_FILE[1]="$_scriptdir/src/package/cppkgs.txt"

DEFAULT_PIP_FILE[0]="$_scriptdir/pip.txt"


SUDO_PREFIX=
if [ "$USER" != "root" ]
	then
	sudobin=`which sudo 2>/dev/null`
	if [ -z "$sudobin" ]
		then
		echo "no sudo in the environment" >&2
		exit 3
	fi
	SUDO_PREFIX="$sudobin -A"
	${SUDO_PREFIX} ls -l >/dev/null
	if [ $? -ne 0 ]
		then
		echo "please add next line into /etc/sudoers after line start with [%sudo ALL=(ALL:ALL) ALL]" >&2
		echo "${USER} ALL=(ALL) NOPASSWD:ALL" >&2
		exit 4
	fi
fi

CheckPackageUbuntu()
{
	local _pkg=$1
	local _res
	local _l=`dpkg -l $_pkg | grep -e "$_pkg" | grep -e '^ii' 2>/dev/null` 
	if [ -n "$_l" ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

RunSudoNoOut()
{
	local _res=0
	${SUDO_PREFIX} $@ >/dev/null
	_res=$?
	echo "$_res"
	return
}

RunSudoOutput()
{
	${SUDO_PREFIX} $@
	return
}

RunSudoMustSucc()
{
	local _args=$@
	local _res=0
	Debug "run [$*]"
	_res=$(RunSudoNoOut $@)
	Debug "_res [$_res]"
	if [ $_res -ne 0 ]
		then
		echo "can not run [$@] [$_res]" >/dev/stderr
		exit 4
	fi
}

RunMustSucc()
{
	local _res
	$@ >/dev/null 2>/dev/null
	_res=$?
	if [ $_res -ne 0 ]
		then
		ErrorExit 4 "can not run [$*]"
	fi
}

InstallPackageUbuntu()
{
	local _pkg=$1
	RunSudoMustSucc apt-get install -y "$_pkg"
}

CheckOrInstallMustSucc()
{
	local _res
	local _pkg=$1
	Debug "check [$_pkg]"
	_res=$(CheckPackageUbuntu "$_pkg")
	if [ $_res -ne 0 ]
		then
		InstallPackageUbuntu "$_pkg"
	fi
}

InstallUpgradePIPPackage()
{
	local _pkg=$1
	Debug "check [$_pkg]"
	local _res=`pip show "$_pkg"`
	if [ -z "$_res" ]
		then
		RunSudoMustSucc pip install $_pkg
	fi
}


CheckOrCloneDir()
{
	local _url=$1
	local _clonedir=$2
	local _res
	if [ -z "$_clonedir" ]
		then
		_clonedir=`basename $_url | sed 's/\.git$//'`
	fi
	if [ ! -d "{PWD}/${_clonedir}/.git" ]
		then
		if [ ! -d "${PWD}/${_clonedir}" ]
			then
			git clone "$_url"
			_res=$?
			if [ $_res -ne 0 ]
				then
				ErrorExit 4 "can not clone[$_url] [$_res]"
			fi
		fi
	fi
	return
}

CheckIfHomeDir()
{
	local _dir=$1
	local _isok
	local _adir=`readlink -f $_dir`
	_isok=`echo "$_adir" | grep -e '^${HOME}'`
	if [ "$_isok" = "$_adir" ]
		then
		echo "0"
	else
		echo "1"
	fi
	return
}

RunDstMustSucc()
{
	local -a _args
	local _i=0
	local _ishome=0
	while [ $# -gt 0 ]
	do
		_args[$_i]=$1
		shift
		_i=`expr $_i + 1`
	done
	Debug "_args [${_args[*]}]"
	_ishome=$(CheckIfHomeDir "$bindir")
	if [ $_ishome -gt 0 ]
		then
		RunMustSucc ${_args[@]}
	else
		RunSudoMustSucc ${_args[@]}
	fi
}


CopyOnDstDir()
{
	local _src=$1
	Debug "src [$_src]"
	if [  -d "$_src" ]
		then
		RunDstMustSucc cp -r "$_src" "$bindir"
	elif [ -f "$_src" ]
		then
		RunDstMustSucc cp "$_src" "$bindir"
	fi

	return

}


Usage()
{
	_ec=$1
	_fmt=$2
	_echoout=/dev/stderr
	if [ $_ec -eq 0 ]
	then
		_echoout=/dev/stdout
	fi

	if [ -n "$_fmt" ]
		then
		echo -e "$_fmt" >$_echoout
	fi

	echo -e "init [OPTIONS] [cmds...]" >$_echoout
	echo -e "\t--help|-h                          to display this help information" >$_echoout
	echo -e "\t--verbose|-v                       to make verbose mode" >$_echoout
	echo -e "\t--bindir|-d      bindir            to specify the bin dir to install for self use" >$_echoout
	echo -e "\t--dpkg|-D        file              to add the dpkg install files default[${DEFAULT_DPKG_FILE[@]}]" >$_echoout
	echo -e "\t--pip|-p         file              to add pip file default [${DEFAULT_PIP_FILE[@]}]" >$_echoout
	echo -e "" >$_echoout
	echo -e "cmds ... will run after all installed" >$_echoout
	exit $_ec
}

declare -a pip_install_files
declare -a dpkg_install_files

while [ $# -gt 0 ]
do
	_curarg=$1
	if [ "$_curarg" = "--help" ] || [ "$_curarg" = "-h" ]
		then
		Usage 0 ""
	elif [ "$_curarg" = "--verbose" ] || [ "$_curarg" = "-v" ]
		then
		verbose=`expr $verbose + 1`
	elif [ "$_curarg" = "--bindir" ] || [ "$_curarg" = "-d" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		bindir=$2
		shift
	elif [ "$_curarg" = "--dpkg" ] || [ "$_curarg" = "-D" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		_num=${#dpkg_install_files[@]}
		dpkg_install_files[$_num]=$2
		shift
	elif [ "$_curarg" = "--pip" ] || [ "$_curarg" = "-p" ]
		then
		if [ $# -lt 2 ]
			then
			Usage 3 "[$_curarg] need an arg"
		fi
		_num=${#pip_install_files[@]}
		pip_install_files[$_num]=$2
		shift		
 	elif [ "$_curarg" = "--" ]
 		then
 		shift
 		break
 	else
		break
	fi
	shift
done

_num=${#dpkg_install_files[@]}
if [  $_num -eq 0 ]
	then
	dpkg_install_files=$DEFAULT_DPKG_FILE
fi

_num=${#pip_install_files[@]}
if [ $_num -eq 0 ]
	then
	pip_install_files=$DEFAULT_PIP_FILE
fi

for _c in ${dpkg_install_files[@]}
do
	for _l in $(cat $_c)
	do
		CheckOrInstallMustSucc "$_l"
	done
done

for _c in ${pip_install_files[@]}
do
	for _l in $(cat $_c)
	do
		InstallUpgradePIPPackage "$_l"
	done
done


_isok=`which extargsparse4sh`
if [ -z "$_isok" ]
	then
	CheckOrCloneDir https://github.com/jeppeter/extargsparse4sh.git

	if [ -n "$bindir" ] && [ ! -d "$bindir" ]
		then
		mkdir -p "$bindir"
	fi

	export PATH=$PATH:$bindir
	(pushd ${PWD} && cd extargsparse4sh && make && popd) || ErrorExit 4 "can not make extargsparse4sh"
	CopyOnDstDir extargsparse4sh/extargsparse4sh
fi

_isok=`echo $PATH | awk -F: '{for(i=1;i<NF;i++){printf("%s\n",$i);}}' | grep -e "^$bindir\$"`
if [ -z "$_isok" ]
	then
	cat <<EOFMM>> $HOME/.bashrc
	export PATH=\$PATH:$bindir
EOFMM
fi

if [ $# -gt 0 ]
	then
	$@
	if [ $? -ne 0 ]
		then
		ErrorExit 5 "run [$@] error[$?]"
	fi
fi